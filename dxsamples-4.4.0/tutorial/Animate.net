//
// time: Fri Sep 15 07:54:15 1995
//
// version: 3.0.0 (format), 3.1.0 (DX)
//
//
// MODULE main
//
// comment: This visual program shows a few uses of the Sequencer to generate animations.
// comment: 
// comment: This visual program is used as part of the tutorial for Data Explorer. To access the tutorial you can type
// comment:      dx -tutor
// comment: or you can choose "Tutorial..." from the Help menu of any window.
// comment: 
// comment: This visual program is discussed in the section "Creating Animations". To find this section, start the tutorial, then click on "Appendix B, Tutorial II: Editing and Creating Visual Programs" in the third paragraph. Then click on "Creating Animations" in the list of Tutorial II Topics.
// comment: 
// comment: The tutorial will suggest ways to use and modify this visual program.
// workspace: width = 790, height = 529
// layout: snap = 0, width = 50, height = 50, align = UL
//
macro main(
) -> (
) {
    // 
    // node Sequencer[1]: x = 11, y = 8, inputs = 7, label = Sequencer
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Sequencer_1"
    // input[4]: defaulting = 1, visible = 1, type = 1, value = 0
    // input[5]: defaulting = 1, visible = 1, type = 1, value = 20
    // input[6]: defaulting = 1, visible = 0, type = 1, value = 1
    // input[7]: defaulting = 0, visible = 0, type = 16777217, value = { 0 20 1 0 20 1 }
    // vcr[1]: min = 0, max = 20, beg = 0, end = 20, cur = 1, inc = 1, loop = on, step = off, pal = on
    // window: position = (0.0531,0.0742), size = 0.2188x0.0781
    //
    main_Sequencer_1_out_1 = @frame;
    // 
    // node Transmitter[2]: x = 24, y = 90, inputs = 1, label = frame
    //
frame = main_Sequencer_1_out_1;
    // 
    // node Receiver[4]: x = 747, y = 59, inputs = 1, label = frame
    //
main_Receiver_4_out_1 = frame;
    // 
    // node Import[3]: x = 503, y = 4, inputs = 6, label = Import
    // input[1]: defaulting = 0, visible = 1, type = 32, value = "cloudwater"
    //
main_Import_3_out_1 = 
    Import(
    main_Import_3_in_1,
    main_Import_3_in_2,
    main_Import_3_in_3,
    main_Import_3_in_4,
    main_Import_3_in_5,
    main_Import_3_in_6
    ) [instance: 3, cache: 1];
    // 
    // node Receiver[6]: x = 566, y = 108, inputs = 1, label = frame
    //
main_Receiver_6_out_1 = frame;
    // 
    // node Compute[3]: x = 559, y = 188, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "$0*.05"
    // expression: value = frame*.05
    // name[2]: value = frame
    //
main_Compute_3_out_1 = 
    Compute(
    main_Compute_3_in_1,
    main_Receiver_6_out_1
    ) [instance: 3, cache: 1];
    // 
    // node Isosurface[3]: x = 529, y = 291, inputs = 6, label = Isosurface
    //
main_Isosurface_3_out_1 = 
    Isosurface(
    main_Import_3_out_1,
    main_Compute_3_out_1,
    main_Isosurface_3_in_3,
    main_Isosurface_3_in_4,
    main_Isosurface_3_in_5,
    main_Isosurface_3_in_6
    ) [instance: 3, cache: 1];
    // 
    // node Import[2]: x = 127, y = 9, inputs = 6, label = Import
    // input[1]: defaulting = 0, visible = 1, type = 32, value = "wind"
    //
main_Import_2_out_1 = 
    Import(
    main_Import_2_in_1,
    main_Import_2_in_2,
    main_Import_2_in_3,
    main_Import_2_in_4,
    main_Import_2_in_5,
    main_Import_2_in_6
    ) [instance: 2, cache: 1];
    // 
    // node Receiver[2]: x = 121, y = 129, inputs = 1, label = frame
    //
main_Receiver_2_out_1 = frame;
    // 
    // node Slab[3]: x = 64, y = 218, inputs = 4, label = Slab
    //
main_Slab_3_out_1 = 
    Slab(
    main_Import_2_out_1,
    main_Slab_3_in_2,
    main_Receiver_2_out_1,
    main_Slab_3_in_4
    ) [instance: 3, cache: 1];
    // 
    // node AutoColor[7]: x = 88, y = 300, inputs = 10, label = AutoColor
    //
main_AutoColor_7_out_1,
main_AutoColor_7_out_2 = 
    AutoColor(
    main_Slab_3_out_1,
    main_AutoColor_7_in_2,
    main_AutoColor_7_in_3,
    main_AutoColor_7_in_4,
    main_AutoColor_7_in_5,
    main_AutoColor_7_in_6,
    main_Import_2_out_1,
    main_AutoColor_7_in_8,
    main_AutoColor_7_in_9,
    main_AutoColor_7_in_10
    ) [instance: 7, cache: 1];
    // 
    // node Image[2]: x = 307, y = 466, inputs = 42, label = Image
    // input[1]: defaulting = 0, visible = 0, type = 67108863, value = "Image_2"
    // input[4]: defaulting = 0, visible = 0, type = 1, value = 1
    // input[5]: defaulting = 0, visible = 0, type = 8, value = [50000 7750 27000]
    // input[6]: defaulting = 0, visible = 0, type = 8, value = [-75798 73197.9 277937]
    // input[7]: defaulting = 0, visible = 0, type = 5, value = 154464.0
    // input[8]: defaulting = 0, visible = 0, type = 1, value = 640
    // input[9]: defaulting = 0, visible = 0, type = 5, value = 0.75
    // input[10]: defaulting = 0, visible = 0, type = 8, value = [0.0524925 0.972408 -0.227303]
    // input[11]: defaulting = 1, visible = 0, type = 5, value = 30.0001
    // input[12]: defaulting = 0, visible = 0, type = 1, value = 0
    // input[14]: defaulting = 0, visible = 0, type = 1, value = 1
    // input[19]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[29]: defaulting = 1, visible = 0, type = 3, value = 0
    // depth: value = 8
    // window: position = (0.4367,0.0244), size = 0.5109x0.5117
    // internal caching: 1
    //
main_Image_2_out_1,
main_Image_2_out_2 = 
    Image(
    main_Image_2_in_1,
    main_AutoColor_7_out_1,
    main_Image_2_in_3,
    main_Image_2_in_4,
    main_Image_2_in_5,
    main_Image_2_in_6,
    main_Image_2_in_7,
    main_Image_2_in_8,
    main_Image_2_in_9,
    main_Image_2_in_10,
    main_Image_2_in_11,
    main_Image_2_in_12,
    main_Image_2_in_13,
    main_Image_2_in_14,
    main_Image_2_in_15,
    main_Image_2_in_16,
    main_Image_2_in_17,
    main_Image_2_in_18,
    main_Image_2_in_19,
    main_Image_2_in_20,
    main_Image_2_in_21,
    main_Image_2_in_22,
    main_Image_2_in_23,
    main_Image_2_in_24,
    main_Image_2_in_25,
    main_Image_2_in_26,
    main_Image_2_in_27,
    main_Image_2_in_28,
    main_Image_2_in_29,
    main_Image_2_in_30,
    main_Image_2_in_31,
    main_Image_2_in_32,
    main_Image_2_in_33,
    main_Image_2_in_34,
    main_Image_2_in_35,
    main_Image_2_in_36,
    main_Image_2_in_37,
    main_Image_2_in_38,
    main_Image_2_in_39,
    main_Image_2_in_40,
    main_Image_2_in_41,
    main_Image_2_in_42
    ) [instance: 2, cache: 1];
    // 
    // node Import[4]: x = 344, y = 12, inputs = 6, label = Import
    // input[1]: defaulting = 0, visible = 1, type = 32, value = "wind"
    //
main_Import_4_out_1 = 
    Import(
    main_Import_4_in_1,
    main_Import_4_in_2,
    main_Import_4_in_3,
    main_Import_4_in_4,
    main_Import_4_in_5,
    main_Import_4_in_6
    ) [instance: 4, cache: 1];
    // 
    // node Grid[1]: x = 260, y = 117, inputs = 4, label = Grid
    // input[1]: defaulting = 0, visible = 1, type = 8, value = [35000 3000 25000]
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "ellipse"
    // input[3]: defaulting = 0, visible = 1, type = 16777224, value = {[5000 0 0][0 0 5000]}
    // input[4]: defaulting = 0, visible = 1, type = 16777217, value = {10}
    //
main_Grid_1_out_1 = 
    Grid(
    main_Grid_1_in_1,
    main_Grid_1_in_2,
    main_Grid_1_in_3,
    main_Grid_1_in_4
    ) [instance: 1, cache: 1];
    // 
    // node Receiver[7]: x = 435, y = 64, inputs = 1, label = frame
    //
main_Receiver_7_out_1 = frame;
    // 
    // node Compute[4]: x = 407, y = 140, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "$0*100"
    // expression: value = a*100
    // name[2]: value = a
    //
main_Compute_4_out_1 = 
    Compute(
    main_Compute_4_in_1,
    main_Receiver_7_out_1
    ) [instance: 4, cache: 1];
    // 
    // node Streamline[3]: x = 255, y = 246, inputs = 7, label = Streamline
    //
main_Streamline_3_out_1 = 
    Streamline(
    main_Import_4_out_1,
    main_Grid_1_out_1,
    main_Streamline_3_in_3,
    main_Compute_4_out_1,
    main_Streamline_3_in_5,
    main_Streamline_3_in_6,
    main_Streamline_3_in_7
    ) [instance: 3, cache: 1];
    // 
    // node AutoColor[8]: x = 346, y = 340, inputs = 10, label = AutoColor
    //
main_AutoColor_8_out_1,
main_AutoColor_8_out_2 = 
    AutoColor(
    main_Streamline_3_out_1,
    main_AutoColor_8_in_2,
    main_AutoColor_8_in_3,
    main_AutoColor_8_in_4,
    main_AutoColor_8_in_5,
    main_AutoColor_8_in_6,
    main_Import_4_out_1,
    main_AutoColor_8_in_8,
    main_AutoColor_8_in_9,
    main_AutoColor_8_in_10
    ) [instance: 8, cache: 1];
// network: end of macro body
CacheScene("Image_2", main_Image_2_out_1, main_Image_2_out_2);
}
main_Sequencer_1_in_1 = "Sequencer_1";
main_Sequencer_1_in_2 = NULL;
main_Sequencer_1_in_3 = NULL;
main_Sequencer_1_in_4 = NULL;
main_Sequencer_1_in_5 = NULL;
main_Sequencer_1_in_6 = NULL;
main_Sequencer_1_in_7 = { 0 20 1 0 20 1 };
main_Sequencer_1_out_1 = NULL;

@startframe = 0;
@nextframe  = @startframe;
@endframe   = 20;
@deltaframe = 1;
main_Transmitter_2_out_1 = NULL;
main_Import_3_in_1 = "cloudwater";
main_Import_3_in_2 = NULL;
main_Import_3_in_3 = NULL;
main_Import_3_in_4 = NULL;
main_Import_3_in_5 = NULL;
main_Import_3_in_6 = NULL;
main_Import_3_out_1 = NULL;
main_Receiver_6_out_1 = NULL;
main_Compute_3_in_1 = "$0*.05";
main_Compute_3_out_1 = NULL;
main_Isosurface_3_in_3 = NULL;
main_Isosurface_3_in_4 = NULL;
main_Isosurface_3_in_5 = NULL;
main_Isosurface_3_in_6 = NULL;
main_Import_2_in_1 = "wind";
main_Import_2_in_2 = NULL;
main_Import_2_in_3 = NULL;
main_Import_2_in_4 = NULL;
main_Import_2_in_5 = NULL;
main_Import_2_in_6 = NULL;
main_Import_2_out_1 = NULL;
main_Receiver_2_out_1 = NULL;
main_Slab_3_in_2 = NULL;
main_Slab_3_in_4 = NULL;
main_Slab_3_out_1 = NULL;
main_AutoColor_7_in_2 = NULL;
main_AutoColor_7_in_3 = NULL;
main_AutoColor_7_in_4 = NULL;
main_AutoColor_7_in_5 = NULL;
main_AutoColor_7_in_6 = NULL;
main_AutoColor_7_in_8 = NULL;
main_AutoColor_7_in_9 = NULL;
main_AutoColor_7_in_10 = NULL;
main_AutoColor_7_out_1 = NULL;
macro Image(
        id,
        object,
        where,
        useVector,
        to,
        from,
        width,
        resolution,
        aspect,
        up,
        viewAngle,
        perspective,
        options,
        buttonState = 1,
        buttonUpApprox = "none",
        buttonDownApprox = "none",
        buttonUpDensity = 1,
        buttonDownDensity = 1,
        renderMode = 0,
        defaultCamera,
        reset,
        backgroundColor,
        throttle,
        RECenable = 0,
        RECfile,
        RECformat,
        RECresolution,
        RECaspect,
        AAenable = 0,
        AAlabels,
        AAticks,
        AAcorners,
        AAframe,
        AAadjust,
        AAcursor,
        AAgrid,
        AAcolors,
        AAannotation,
        AAlabelscale,
        AAfont,
        interactionMode,
        title) -> (
        object,
        camera)
{
    ImageMessage(
        id,
        backgroundColor,
        throttle,
        RECenable,
        RECfile,
        RECformat,
        RECresolution,
        RECaspect,
        AAenable,
        AAlabels,
        AAticks,
        AAcorners,
        AAframe,
        AAadjust,
        AAcursor,
        AAgrid,
        AAcolors,
        AAannotation,
        AAlabelscale,
        AAfont,
        interactionMode,
        title) [instance: 1, cache: 1];
    autoCamera =
        AutoCamera(
            object,
            "front",
            object,
            resolution,
            aspect,
            [0,1,0],
            perspective,
            viewAngle,
            backgroundColor) [instance: 1, cache: 1];
    realCamera =
        Camera(
            to,
            from,
            width,
            resolution,
            aspect,
            up,
            perspective,
            viewAngle,
            backgroundColor) [instance: 1, cache: 1];
    nullDefaultCamera =
        Inquire(defaultCamera,
            "is null + 1") [instance: 1, cache: 1];
    resetCamera =
        Switch(
            nullDefaultCamera,
            defaultCamera,
            autoCamera) [instance: 1, cache: 1];
    resetNull = 
        Inquire(
            reset,
            "is null + 1") [instance: 2, cache: 1];
    reset =
        Switch(
            resetNull,
            reset,
            0) [instance: 2, cache: 1];
    whichCamera =
        Compute(
            "($0 != 0 || $1 == 0) ? 1 : 2",            reset,
            useVector) [instance: 1, cache: 1];
    camera = Switch(
            whichCamera,
            resetCamera,
            realCamera) [instance: 3, cache: 1];
    AAobject =
        AutoAxes(
            object,
            camera,
            AAlabels,
            AAticks,
            AAcorners,
            AAframe,
            AAadjust,
            AAcursor,
            AAgrid,
            AAcolors,
            AAannotation,
            AAlabelscale,
            AAfont) [instance: 1, cache: 1];
    switchAAenable = Compute("$0+1",
	     AAenable) [instance: 2, cache: 1];
    object = Switch(
	     switchAAenable,
	     object,
	     AAobject) [instance:4, cache: 1];
    SWapproximation_options =
        Switch(
            buttonState,
            buttonUpApprox,
            buttonDownApprox) [instance: 5, cache: 1];
    SWdensity_options =
        Switch(
            buttonState,
            buttonUpDensity,
            buttonDownDensity) [instance: 6, cache: 1];
    HWapproximation_options =
        Format(
            "%s,%s",
            buttonDownApprox,
            buttonUpApprox) [instance: 1, cache: 1];
    HWdensity_options =
        Format(
            "%d,%d",
            buttonDownDensity,
            buttonUpDensity) [instance: 2, cache: 1];
    switchRenderMode = Compute(
	     "$0+1",
	     renderMode) [instance: 3, cache: 1];
    approximation_options = Switch(
	     switchRenderMode,
            SWapproximation_options,
	     HWapproximation_options) [instance: 7, cache: 1];
    density_options = Switch(
	     switchRenderMode,
            SWdensity_options,
            HWdensity_options) [instance: 8, cache: 1];
    renderModeString = Switch(
            switchRenderMode,
            "software",
            "hardware")[instance: 9, cache: 1];
    annoted_object =
        Options(
            object,
            "send boxes",
            0,
            "cache",
            1,
            "rendering approximation",
            approximation_options,
            "render every",
            density_options,
            "rendering mode",
            renderModeString) [instance: 1, cache: 1];
    RECresNull =
        Inquire(
            RECresolution,
            "is null + 1") [instance: 3, cache: 1];
    ImageResolution =
        Inquire(
            camera,
            "camera resolution") [instance: 5, cache: 1];
    RECresolution =
        Switch(
            RECresNull,
            RECresolution,
            ImageResolution) [instance: 10, cache: 1];
    RECaspectNull =
        Inquire(
            RECaspect,
            "is null + 1") [instance: 4, cache: 1];
    ImageAspect =
        Inquire(
            camera,
            "camera aspect") [instance: 5, cache: 1];
    RECaspect =
        Switch(
            RECaspectNull,
            RECaspect,
            ImageAspect) [instance: 11, cache: 1];
    switchRECenable = Compute(
          "$0 == 0 ? 1 : (($1 == $2) && ($3 == $4)) ? 2 : 3",
            RECenable,
            RECresolution,
            ImageResolution,
            RECaspect,
	     ImageAspect) [instance: 4, cache: 1];
    NoRECobject, RECNoRerenderObject, RECRerenderObject = Route(switchRECenable, annoted_object);
    Display(
        NoRECobject,
        camera,
        where,
        throttle) [instance: 1, cache: 1];
    image =
        Render(
            RECNoRerenderObject,
            camera) [instance: 1, cache: 1];
    Display(
        image,
        NULL,
        where,
        throttle) [instance: 2, cache: 1];
    WriteImage(
        image,
        RECfile,
        RECformat) [instance: 1, cache: 1];
    RECupdateCamera =
	UpdateCamera(
	    camera,
	    resolution=RECresolution,
	    aspect=RECaspect) [instance: 1, cache: 1];
    Display(
        RECRerenderObject,
        camera,
        where,
        throttle) [instance: 3, cache: 1];
    image =
        Render(
            RECRerenderObject,
            RECupdateCamera) [instance: 2, cache: 1];
    WriteImage(
        image,
        RECfile,
        RECformat) [instance: 2, cache: 1];
}
main_Image_2_in_1 = "Image_2";
main_Image_2_in_3 = "X8,,";
main_Image_2_in_4 = 1;
main_Image_2_in_5 = [50000 7750 27000];
main_Image_2_in_6 = [-75798 73197.9 277937];
main_Image_2_in_7 = 154464.0;
main_Image_2_in_8 = 640;
main_Image_2_in_9 = 0.75;
main_Image_2_in_10 = [0.0524925 0.972408 -0.227303];
main_Image_2_in_11 = NULL;
main_Image_2_in_12 = 0;
main_Image_2_in_13 = NULL;
main_Image_2_in_14 = 1;
main_Image_2_in_15 = NULL;
main_Image_2_in_16 = NULL;
main_Image_2_in_17 = NULL;
main_Image_2_in_18 = NULL;
main_Image_2_in_19 = 0;
main_Image_2_in_20 = NULL;
main_Image_2_in_21 = NULL;
main_Image_2_in_22 = NULL;
main_Image_2_in_23 = NULL;
main_Image_2_in_25 = NULL;
main_Image_2_in_26 = NULL;
main_Image_2_in_27 = NULL;
main_Image_2_in_28 = NULL;
main_Image_2_in_29 = NULL;
main_Image_2_in_30 = NULL;
main_Image_2_in_31 = NULL;
main_Image_2_in_32 = NULL;
main_Image_2_in_33 = NULL;
main_Image_2_in_34 = NULL;
main_Image_2_in_35 = NULL;
main_Image_2_in_36 = NULL;
main_Image_2_in_37 = NULL;
main_Image_2_in_38 = NULL;
main_Image_2_in_39 = NULL;
main_Image_2_in_40 = NULL;
main_Image_2_in_41 = NULL;
main_Image_2_in_42 = NULL;
main_Import_4_in_1 = "wind";
main_Import_4_in_2 = NULL;
main_Import_4_in_3 = NULL;
main_Import_4_in_4 = NULL;
main_Import_4_in_5 = NULL;
main_Import_4_in_6 = NULL;
main_Import_4_out_1 = NULL;
main_Grid_1_in_1 = [35000 3000 25000];
main_Grid_1_in_2 = "ellipse";
main_Grid_1_in_3 = {[5000 0 0][0 0 5000]};
main_Grid_1_in_4 = {10};
main_Grid_1_out_1 = NULL;
main_Receiver_7_out_1 = NULL;
main_Compute_4_in_1 = "$0*100";
main_Compute_4_out_1 = NULL;
main_Streamline_3_in_3 = NULL;
main_Streamline_3_in_5 = NULL;
main_Streamline_3_in_6 = NULL;
main_Streamline_3_in_7 = NULL;
main_Streamline_3_out_1 = NULL;
main_AutoColor_8_in_2 = NULL;
main_AutoColor_8_in_3 = NULL;
main_AutoColor_8_in_4 = NULL;
main_AutoColor_8_in_5 = NULL;
main_AutoColor_8_in_6 = NULL;
main_AutoColor_8_in_8 = NULL;
main_AutoColor_8_in_9 = NULL;
main_AutoColor_8_in_10 = NULL;
Executive("product version 3 1 0");
$sync

sequence main();
play;
