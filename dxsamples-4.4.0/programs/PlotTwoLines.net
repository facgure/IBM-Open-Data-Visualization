//
// time: Wed Apr  9 15:41:20 1997
//
// version: 3.1.1 (format), 3.1.4 (DX Beta)
//
//
// MODULE main
//
// comment: This visual program shows some uses of the Plot module. Two data fields are imported. The selector interactor in the control panel (choose "Open All Control Panels" from the Windows menu) allows you to choose which variables are imported. A plot will be created, with one variable associated with the left axis of the plot, and the other variable associated with the right axis of the plot. 
// comment: 
// comment: If the data field is not scalar (for example, wind), then the Inquire module is used along with Compute to compute the magnitude of the wind. The question "is scalar" is asked using the Inquire module, which returns a "1" if the data field is scalar, and a "0" if the data field is vector. This answer is used in a conditional expression in Compute to take the magnitude if the the data is not scalar.
// comment: 
// comment: A vector interactor allows you to choose the position of the line on which we examine the two data fields.

// page assignment: image	order=7, windowed=0, showing=0
// page assignment: import	order=2, windowed=0, showing=1
// page assignment: line1	order=5, windowed=0, showing=0
// page assignment: line2	order=6, windowed=0, showing=0
// page assignment: makeline	order=4, windowed=0, showing=0
// page assignment: visualize	order=3, windowed=0, showing=0
// workspace: width = 438, height = 544
// layout: snap = 0, width = 50, height = 50, align = UL
//
macro main(
) -> (
) {
    // 
    // node Vector[1]: x = 48, y = 20, inputs = 11, label = Vector
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Vector_1"
    // input[3]: defaulting = 0, visible = 0, type = 8, value = [ 41000 3000 30000 ]
    // input[4]: defaulting = 1, visible = 0, type = 3, value = 0
    // input[5]: defaulting = 1, visible = 0, type = 8, value = [ 30000.0 3000.0 15000.0 ]
    // input[6]: defaulting = 1, visible = 0, type = 8, value = [ 70000.0 10000.0 45000.0 ]
    // input[7]: defaulting = 1, visible = 0, type = 8, value = [       1        1        1]
    // input[8]: defaulting = 1, visible = 0, type = 32, value = "[ 2 2 2 ]"
    // input[9]: defaulting = 1, visible = 0, type = 8, value = [ 2.0 2.0 2.0 ]
    // output[1]: visible = 1, type = 8, value = [ 41000 3000 30000 ]
    // page group: makeline
    //
    // 
    // node Integer[1]: x = 167, y = 29, inputs = 11, label = Integer
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Integer_1"
    // input[3]: defaulting = 0, visible = 0, type = 1, value = 42 
    // input[4]: defaulting = 1, visible = 0, type = 1, value = 0
    // input[5]: defaulting = 1, visible = 0, type = 1, value = 2
    // input[6]: defaulting = 1, visible = 0, type = 1, value = 100
    // input[7]: defaulting = 1, visible = 0, type = 5, value = 1.00000
    // input[8]: defaulting = 1, visible = 0, type = 32, value = "0"
    // input[9]: defaulting = 1, visible = 0, type = 1, value = 0
    // output[1]: visible = 1, type = 1, value = 42 
    // page group: makeline
    //
    // 
    // node Grid[1]: x = 65, y = 167, inputs = 4, label = Grid
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "line"
    // input[3]: defaulting = 0, visible = 1, type = 16777224, value = {[30000 0 0]}
    // page group: makeline
    //
main_Grid_1_out_1 = 
    Grid(
    main_Vector_1_out_1,
    main_Grid_1_in_2,
    main_Grid_1_in_3,
    main_Integer_1_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Glyph[1]: x = 66, y = 262, inputs = 7, label = Glyph
    // input[4]: defaulting = 0, visible = 1, type = 5, value = 500.000
    // page group: makeline
    //
main_Glyph_1_out_1 = 
    Glyph(
    main_Grid_1_out_1,
    main_Glyph_1_in_2,
    main_Glyph_1_in_3,
    main_Glyph_1_in_4,
    main_Glyph_1_in_5,
    main_Glyph_1_in_6,
    main_Glyph_1_in_7
    ) [instance: 1, cache: 1];
    // 
    // node ShowConnections[1]: x = 206, y = 265, inputs = 1, label = ShowConnections
    // page group: makeline
    //
main_ShowConnections_1_out_1 = 
    ShowConnections(
    main_Grid_1_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Collect[1]: x = 149, y = 354, inputs = 2, label = Collect
    // page group: makeline
    //
main_Collect_1_out_1 = 
    Collect(
    main_Glyph_1_out_1,
    main_ShowConnections_1_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Import[3]: x = 65, y = 50, inputs = 6, label = Import
    // input[1]: defaulting = 0, visible = 1, type = 32, value = "cloudwater"
    // page group: visualize
    //
main_Import_3_out_1 = 
    Import(
    main_Import_3_in_1,
    main_Import_3_in_2,
    main_Import_3_in_3,
    main_Import_3_in_4,
    main_Import_3_in_5,
    main_Import_3_in_6
    ) [instance: 3, cache: 1];
    // 
    // node Isosurface[1]: x = 70, y = 209, inputs = 6, label = Isosurface
    // page group: visualize
    //
main_Isosurface_1_out_1 = 
    Isosurface(
    main_Import_3_out_1,
    main_Isosurface_1_in_2,
    main_Isosurface_1_in_3,
    main_Isosurface_1_in_4,
    main_Isosurface_1_in_5,
    main_Isosurface_1_in_6
    ) [instance: 1, cache: 1];
    // 
    // node Color[1]: x = 80, y = 298, inputs = 5, label = Color
    // input[3]: defaulting = 0, visible = 1, type = 5, value = .45
    // page group: visualize
    //
main_Color_1_out_1 = 
    Color(
    main_Isosurface_1_out_1,
    main_Color_1_in_2,
    main_Color_1_in_3,
    main_Color_1_in_4,
    main_Color_1_in_5
    ) [instance: 1, cache: 1];
    // 
    // node Color[4]: x = 156, y = 427, inputs = 5, label = Color
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "red"
    // page group: makeline
    //
main_Color_4_out_1 = 
    Color(
    main_Collect_1_out_1,
    main_Color_4_in_2,
    main_Color_4_in_3,
    main_Color_4_in_4,
    main_Color_4_in_5
    ) [instance: 4, cache: 1];
    // 
    // node Transmitter[1]: x = 178, y = 515, inputs = 1, label = glyphline
    // page group: makeline
    //
glyphline = main_Color_4_out_1;
    // 
    // node Receiver[1]: x = 265, y = 70, inputs = 1, label = glyphline
    // page group: visualize
    //
main_Receiver_1_out_1[cache: 0] = glyphline;
    // 
    // node ShowBox[3]: x = 164, y = 187, inputs = 1, label = ShowBox
    // page group: visualize
    //
main_ShowBox_3_out_1,
main_ShowBox_3_out_2 = 
    ShowBox(
    main_Import_3_out_1
    ) [instance: 3, cache: 1];
    // 
    // node Collect[2]: x = 113, y = 461, inputs = 3, label = Collect
    // page group: visualize
    //
main_Collect_2_out_1 = 
    Collect(
    main_Color_1_out_1,
    main_Receiver_1_out_1,
    main_ShowBox_3_out_1
    ) [instance: 2, cache: 1];
    // 
    // node Transmitter[6]: x = 54, y = 513, inputs = 1, label = line
    // page group: makeline
    //
line = main_Grid_1_out_1;
    // 
    // node Receiver[8]: x = 13, y = 8, inputs = 1, label = line
    // page group: line1
    //
main_Receiver_8_out_1[cache: 0] = line;
    // 
    // node Selector[2]: x = 59, y = 136, inputs = 7, label = Selector
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Selector_2"
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "temperature" 
    // input[3]: defaulting = 0, visible = 0, type = 29, value = 1 
    // input[4]: defaulting = 1, visible = 1, type = 16777248, value = { "temperature" "wind" "cloudwater" "rainwater" }
    // input[5]: defaulting = 1, visible = 0, type = 16777245, value = { 1 0 0 0 }
    // input[6]: defaulting = 1, visible = 0, type = 3, value = 0
    // output[1]: visible = 1, type = 29, value = 1 
    // output[2]: visible = 1, type = 32, value = "temperature" 
    // page group: import
    //
    // 
    // node Format[2]: x = 53, y = 218, inputs = 2, label = Format
    // input[1]: defaulting = 0, visible = 1, type = 32, value = "%s"
    // page group: import
    //
main_Format_2_out_1 = 
    Format(
    main_Format_2_in_1,
    main_Selector_2_out_2
    ) [instance: 2, cache: 1];
    // 
    // node Import[1]: x = 64, y = 318, inputs = 6, label = Import
    // page group: import
    //
main_Import_1_out_1 = 
    Import(
    main_Format_2_out_1,
    main_Import_1_in_2,
    main_Import_1_in_3,
    main_Import_1_in_4,
    main_Import_1_in_5,
    main_Import_1_in_6
    ) [instance: 1, cache: 1];
    // 
    // node Transmitter[4]: x = 73, y = 482, inputs = 1, label = var1
    // page group: import
    //
var1 = main_Import_1_out_1;
    // 
    // node Receiver[6]: x = 64, y = 11, inputs = 1, label = var1
    // page group: line1
    //
main_Receiver_6_out_1[cache: 0] = var1;
    // 
    // node Map[1]: x = 25, y = 80, inputs = 4, label = Map
    // page group: line1
    //
main_Map_1_out_1 = 
    Map(
    main_Receiver_8_out_1,
    main_Receiver_6_out_1,
    main_Map_1_in_3,
    main_Map_1_in_4
    ) [instance: 1, cache: 1];
    // 
    // node Mark[1]: x = 24, y = 159, inputs = 2, label = Mark
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "positions"
    // page group: line1
    //
main_Mark_1_out_1 = 
    Mark(
    main_Map_1_out_1,
    main_Mark_1_in_2
    ) [instance: 1, cache: 1];
    // 
    // node Compute[1]: x = 27, y = 237, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "$0.x"
    // page group: line1
    // expression: value = a.x
    // name[2]: value = a
    //
main_Compute_1_out_1 = 
    Compute(
    main_Compute_1_in_1,
    main_Mark_1_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Unmark[1]: x = 32, y = 307, inputs = 2, label = Unmark
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "positions"
    // page group: line1
    //
main_Unmark_1_out_1 = 
    Unmark(
    main_Compute_1_out_1,
    main_Unmark_1_in_2
    ) [instance: 1, cache: 1];
    // 
    // node Inquire[2]: x = 116, y = 362, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "is scalar"
    // page group: line1
    //
main_Inquire_2_out_1 = 
    Inquire(
    main_Unmark_1_out_1,
    main_Inquire_2_in_2,
    main_Inquire_2_in_3
    ) [instance: 2, cache: 1];
    // 
    // node Compute[3]: x = 26, y = 402, inputs = 3, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "($1) ? $0 : mag($0)"
    // page group: line1
    // expression: value = (isscalar) ? a : mag(a)
    // name[2]: value = a
    // name[3]: value = isscalar
    //
main_Compute_3_out_1 = 
    Compute(
    main_Compute_3_in_1,
    main_Unmark_1_out_1,
    main_Inquire_2_out_1
    ) [instance: 3, cache: 1];
    // 
    // node Transmitter[2]: x = 120, y = 474, inputs = 1, label = var1_name
    // page group: import
    //
var1_name = main_Selector_2_out_2;
    // 
    // node Receiver[2]: x = 191, y = 29, inputs = 1, label = var1_name
    // page group: line1
    //
main_Receiver_2_out_1[cache: 0] = var1_name;
    // 
    // node Options[1]: x = 54, y = 489, inputs = 5, label = Options
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "label"
    // input[4]: defaulting = 0, visible = 1, type = 32, value = "mark"
    // input[5]: defaulting = 0, visible = 1, type = 32, value = "triangle"
    // page group: line1
    //
main_Options_1_out_1 = 
    Options(
    main_Compute_3_out_1,
    main_Options_1_in_2,
    main_Receiver_2_out_1,
    main_Options_1_in_4,
    main_Options_1_in_5
    ) [instance: 1, cache: 1];
    // 
    // node Color[2]: x = 200, y = 528, inputs = 5, label = Color
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "green"
    // page group: line1
    //
main_Color_2_out_1 = 
    Color(
    main_Options_1_out_1,
    main_Color_2_in_2,
    main_Color_2_in_3,
    main_Color_2_in_4,
    main_Color_2_in_5
    ) [instance: 2, cache: 1];
    // 
    // node Receiver[11]: x = 31, y = 20, inputs = 1, label = line
    // page group: line2
    //
main_Receiver_11_out_1[cache: 0] = line;
    // 
    // node Selector[1]: x = 309, y = 153, inputs = 7, label = Selector
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Selector_1"
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "rainwater" 
    // input[3]: defaulting = 0, visible = 0, type = 29, value = 0 
    // input[4]: defaulting = 1, visible = 1, type = 16777248, value = { "temperature" "wind" "cloudwater" "rainwater" }
    // input[5]: defaulting = 1, visible = 0, type = 16777245, value = { 1 0 0 0 }
    // input[6]: defaulting = 1, visible = 0, type = 3, value = 0
    // output[1]: visible = 1, type = 29, value = 0 
    // output[2]: visible = 1, type = 32, value = "rainwater" 
    // page group: import
    //
    // 
    // node Format[1]: x = 263, y = 225, inputs = 2, label = Format
    // input[1]: defaulting = 0, visible = 1, type = 32, value = "%s"
    // page group: import
    //
main_Format_1_out_1 = 
    Format(
    main_Format_1_in_1,
    main_Selector_1_out_2
    ) [instance: 1, cache: 1];
    // 
    // node Import[2]: x = 267, y = 322, inputs = 6, label = Import
    // page group: import
    //
main_Import_2_out_1 = 
    Import(
    main_Format_1_out_1,
    main_Import_2_in_2,
    main_Import_2_in_3,
    main_Import_2_in_4,
    main_Import_2_in_5,
    main_Import_2_in_6
    ) [instance: 2, cache: 1];
    // 
    // node Transmitter[5]: x = 314, y = 480, inputs = 1, label = var2
    // page group: import
    //
var2 = main_Import_2_out_1;
    // 
    // node Receiver[7]: x = 73, y = 23, inputs = 1, label = var2
    // page group: line2
    //
main_Receiver_7_out_1[cache: 0] = var2;
    // 
    // node Map[2]: x = 47, y = 91, inputs = 4, label = Map
    // page group: line2
    //
main_Map_2_out_1 = 
    Map(
    main_Receiver_11_out_1,
    main_Receiver_7_out_1,
    main_Map_2_in_3,
    main_Map_2_in_4
    ) [instance: 2, cache: 1];
    // 
    // node Mark[2]: x = 51, y = 166, inputs = 2, label = Mark
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "positions"
    // page group: line2
    //
main_Mark_2_out_1 = 
    Mark(
    main_Map_2_out_1,
    main_Mark_2_in_2
    ) [instance: 2, cache: 1];
    // 
    // node Compute[2]: x = 52, y = 239, inputs = 2, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "$0.x"
    // page group: line2
    // expression: value = a.x
    // name[2]: value = a
    //
main_Compute_2_out_1 = 
    Compute(
    main_Compute_2_in_1,
    main_Mark_2_out_1
    ) [instance: 2, cache: 1];
    // 
    // node Unmark[2]: x = 60, y = 316, inputs = 2, label = Unmark
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "positions"
    // page group: line2
    //
main_Unmark_2_out_1 = 
    Unmark(
    main_Compute_2_out_1,
    main_Unmark_2_in_2
    ) [instance: 2, cache: 1];
    // 
    // node Inquire[1]: x = 137, y = 378, inputs = 3, label = Inquire
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "is scalar"
    // page group: line2
    //
main_Inquire_1_out_1 = 
    Inquire(
    main_Unmark_2_out_1,
    main_Inquire_1_in_2,
    main_Inquire_1_in_3
    ) [instance: 1, cache: 1];
    // 
    // node Compute[4]: x = 25, y = 436, inputs = 3, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "$1 ? $0 : mag($0)"
    // page group: line2
    // expression: value = isscalar ? a : mag(a)
    // name[2]: value = a
    // name[3]: value = isscalar
    //
main_Compute_4_out_1 = 
    Compute(
    main_Compute_4_in_1,
    main_Unmark_2_out_1,
    main_Inquire_1_out_1
    ) [instance: 4, cache: 1];
    // 
    // node Transmitter[3]: x = 361, y = 473, inputs = 1, label = var2_name
    // page group: import
    //
var2_name = main_Selector_1_out_2;
    // 
    // node Receiver[3]: x = 229, y = 372, inputs = 1, label = var2_name
    // page group: line2
    //
main_Receiver_3_out_1[cache: 0] = var2_name;
    // 
    // node Options[2]: x = 136, y = 488, inputs = 7, label = Options
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "label"
    // input[4]: defaulting = 0, visible = 1, type = 32, value = "mark"
    // input[5]: defaulting = 0, visible = 1, type = 32, value = "star"
    // input[6]: defaulting = 0, visible = 1, type = 32, value = "scatter"
    // input[7]: defaulting = 0, visible = 1, type = 29, value = 1
    // page group: line2
    //
main_Options_2_out_1 = 
    Options(
    main_Compute_4_out_1,
    main_Options_2_in_2,
    main_Receiver_3_out_1,
    main_Options_2_in_4,
    main_Options_2_in_5,
    main_Options_2_in_6,
    main_Options_2_in_7
    ) [instance: 2, cache: 1];
    // 
    // node Color[3]: x = 327, y = 510, inputs = 5, label = Color
    // input[2]: defaulting = 0, visible = 1, type = 32, value = "cyan"
    // page group: line2
    //
main_Color_3_out_1 = 
    Color(
    main_Options_2_out_1,
    main_Color_3_in_2,
    main_Color_3_in_3,
    main_Color_3_in_4,
    main_Color_3_in_5
    ) [instance: 3, cache: 1];
    // 
    // node Image[3]: x = 143, y = 554, inputs = 48, label = Image
    // input[1]: defaulting = 0, visible = 0, type = 67108863, value = "Image_3"
    // input[4]: defaulting = 0, visible = 0, type = 1, value = 1
    // input[5]: defaulting = 0, visible = 0, type = 8, value = [50000 7750 27000]
    // input[6]: defaulting = 0, visible = 0, type = 8, value = [-5182.24 59391.7 305147]
    // input[7]: defaulting = 0, visible = 0, type = 5, value = 154464.0
    // input[8]: defaulting = 0, visible = 0, type = 1, value = 640
    // input[9]: defaulting = 0, visible = 0, type = 5, value = 0.75
    // input[10]: defaulting = 0, visible = 0, type = 8, value = [0.0178228 0.98367 -0.179096]
    // input[11]: defaulting = 1, visible = 0, type = 5, value = 30.0002
    // input[12]: defaulting = 0, visible = 0, type = 1, value = 0
    // input[14]: defaulting = 0, visible = 0, type = 1, value = 1
    // input[15]: defaulting = 1, visible = 0, type = 32, value = "none"
    // input[16]: defaulting = 1, visible = 0, type = 32, value = "none"
    // input[17]: defaulting = 1, visible = 0, type = 1, value = 1
    // input[18]: defaulting = 1, visible = 0, type = 1, value = 1
    // input[19]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[29]: defaulting = 1, visible = 0, type = 3, value = 0
    // page group: visualize
    // depth: value = 24
    // window: position = (0.0336,0.3975), size = 0.5109x0.5117
    // internal caching: 1
    //
main_Image_3_out_1,
main_Image_3_out_2,
main_Image_3_out_3 = 
    Image(
    main_Image_3_in_1,
    main_Collect_2_out_1,
    main_Image_3_in_3,
    main_Image_3_in_4,
    main_Image_3_in_5,
    main_Image_3_in_6,
    main_Image_3_in_7,
    main_Image_3_in_8,
    main_Image_3_in_9,
    main_Image_3_in_10,
    main_Image_3_in_11,
    main_Image_3_in_12,
    main_Image_3_in_13,
    main_Image_3_in_14,
    main_Image_3_in_15,
    main_Image_3_in_16,
    main_Image_3_in_17,
    main_Image_3_in_18,
    main_Image_3_in_19,
    main_Image_3_in_20,
    main_Image_3_in_21,
    main_Image_3_in_22,
    main_Image_3_in_23,
    main_Image_3_in_24,
    main_Image_3_in_25,
    main_Image_3_in_26,
    main_Image_3_in_27,
    main_Image_3_in_28,
    main_Image_3_in_29,
    main_Image_3_in_30,
    main_Image_3_in_31,
    main_Image_3_in_32,
    main_Image_3_in_33,
    main_Image_3_in_34,
    main_Image_3_in_35,
    main_Image_3_in_36,
    main_Image_3_in_37,
    main_Image_3_in_38,
    main_Image_3_in_39,
    main_Image_3_in_40,
    main_Image_3_in_41,
    main_Image_3_in_42,
    main_Image_3_in_43,
    main_Image_3_in_44,
    main_Image_3_in_45,
    main_Image_3_in_46,
    main_Image_3_in_47,
    main_Image_3_in_48
    ) [instance: 3, cache: 1];
    // 
    // node Transmitter[7]: x = 290, y = 538, inputs = 1, label = first_line
    // page group: line1
    //
first_line = main_Color_2_out_1;
    // 
    // node Receiver[9]: x = 24, y = 106, inputs = 1, label = first_line
    // page group: image
    //
main_Receiver_9_out_1[cache: 0] = first_line;
    // 
    // node Receiver[5]: x = 368, y = 42, inputs = 1, label = var1_name
    // page group: line1
    //
main_Receiver_5_out_1[cache: 0] = var1_name;
    // 
    // node List[1]: x = 369, y = 162, inputs = 2, label = List
    // input[1]: defaulting = 0, visible = 1, type = 16777248, value = {"x location"}
    // page group: line1
    //
main_List_1_out_1 = 
    List(
    main_List_1_in_1,
    main_Receiver_5_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Transmitter[8]: x = 360, y = 273, inputs = 1, label = axes_labels
    // page group: line1
    //
axes_labels = main_List_1_out_1;
    // 
    // node Receiver[10]: x = 96, y = 109, inputs = 1, label = axes_labels
    // page group: image
    //
main_Receiver_10_out_1[cache: 0] = axes_labels;
    // 
    // node Transmitter[9]: x = 412, y = 529, inputs = 1, label = second_line
    // page group: line2
    //
second_line = main_Color_3_out_1;
    // 
    // node Receiver[12]: x = 205, y = 106, inputs = 1, label = second_line
    // page group: image
    //
main_Receiver_12_out_1[cache: 0] = second_line;
    // 
    // node Receiver[4]: x = 300, y = 107, inputs = 1, label = var2_name
    // page group: image
    //
main_Receiver_4_out_1[cache: 0] = var2_name;
    // 
    // node Plot[1]: x = 63, y = 256, inputs = 24, label = Plot
    // input[13]: defaulting = 0, visible = 1, type = 32, value = "roman_d"
    // input[14]: visible = 1
    // input[15]: visible = 1
    // page group: image
    //
main_Plot_1_out_1 = 
    Plot(
    main_Receiver_9_out_1,
    main_Receiver_10_out_1,
    main_Plot_1_in_3,
    main_Plot_1_in_4,
    main_Plot_1_in_5,
    main_Plot_1_in_6,
    main_Plot_1_in_7,
    main_Plot_1_in_8,
    main_Plot_1_in_9,
    main_Plot_1_in_10,
    main_Plot_1_in_11,
    main_Plot_1_in_12,
    main_Plot_1_in_13,
    main_Receiver_12_out_1,
    main_Receiver_4_out_1,
    main_Plot_1_in_16,
    main_Plot_1_in_17,
    main_Plot_1_in_18,
    main_Plot_1_in_19,
    main_Plot_1_in_20,
    main_Plot_1_in_21,
    main_Plot_1_in_22,
    main_Plot_1_in_23,
    main_Plot_1_in_24
    ) [instance: 1, cache: 1];
    // 
    // node Image[7]: x = 106, y = 380, inputs = 48, label = Image
    // input[1]: defaulting = 0, visible = 0, type = 67108863, value = "Image_7"
    // input[4]: defaulting = 0, visible = 0, type = 1, value = 1
    // input[5]: defaulting = 0, visible = 0, type = 8, value = [37124.1 5086.11 0]
    // input[6]: defaulting = 0, visible = 0, type = 8, value = [37124.1 5086.11 394102]
    // input[7]: defaulting = 0, visible = 0, type = 5, value = 211199.0
    // input[8]: defaulting = 0, visible = 0, type = 1, value = 631
    // input[9]: defaulting = 0, visible = 0, type = 5, value = 0.638
    // input[10]: defaulting = 0, visible = 0, type = 8, value = [0 1 0]
    // input[11]: defaulting = 1, visible = 0, type = 5, value = 30.0001
    // input[12]: defaulting = 0, visible = 0, type = 1, value = 0
    // input[14]: defaulting = 0, visible = 0, type = 1, value = 1
    // input[15]: defaulting = 1, visible = 0, type = 32, value = "none"
    // input[16]: defaulting = 1, visible = 0, type = 32, value = "none"
    // input[17]: defaulting = 1, visible = 0, type = 1, value = 1
    // input[18]: defaulting = 1, visible = 0, type = 1, value = 1
    // input[19]: defaulting = 0, visible = 0, type = 3, value = 0
    // input[21]: defaulting = 0, visible = 1, type = 3, value = 1
    // input[29]: defaulting = 1, visible = 0, type = 3, value = 0
    // page group: image
    // depth: value = 24
    // window: position = (0.4891,0.4365), size = 0.5039x0.4355
    // internal caching: 1
    //
main_Image_7_out_1,
main_Image_7_out_2,
main_Image_7_out_3 = 
    Image(
    main_Image_7_in_1,
    main_Plot_1_out_1,
    main_Image_7_in_3,
    main_Image_7_in_4,
    main_Image_7_in_5,
    main_Image_7_in_6,
    main_Image_7_in_7,
    main_Image_7_in_8,
    main_Image_7_in_9,
    main_Image_7_in_10,
    main_Image_7_in_11,
    main_Image_7_in_12,
    main_Image_7_in_13,
    main_Image_7_in_14,
    main_Image_7_in_15,
    main_Image_7_in_16,
    main_Image_7_in_17,
    main_Image_7_in_18,
    main_Image_7_in_19,
    main_Image_7_in_20,
    main_Image_7_in_21,
    main_Image_7_in_22,
    main_Image_7_in_23,
    main_Image_7_in_24,
    main_Image_7_in_25,
    main_Image_7_in_26,
    main_Image_7_in_27,
    main_Image_7_in_28,
    main_Image_7_in_29,
    main_Image_7_in_30,
    main_Image_7_in_31,
    main_Image_7_in_32,
    main_Image_7_in_33,
    main_Image_7_in_34,
    main_Image_7_in_35,
    main_Image_7_in_36,
    main_Image_7_in_37,
    main_Image_7_in_38,
    main_Image_7_in_39,
    main_Image_7_in_40,
    main_Image_7_in_41,
    main_Image_7_in_42,
    main_Image_7_in_43,
    main_Image_7_in_44,
    main_Image_7_in_45,
    main_Image_7_in_46,
    main_Image_7_in_47,
    main_Image_7_in_48
    ) [instance: 7, cache: 1];
    //
    // decorator Annotate	pos=(114,43) size=258x28 style(Label), font=bold, value = <NULL>
    // annotation user_begin: 35
    // annotation user: This page imports the selected data
    // annotation user_end: <NULL>
    // page group: import
    //
    // decorator Annotate	pos=(166,14) size=449x44 style(Label), font=bold, value = <NULL>
    // annotation user_begin: 125
    // annotation user: This page visualizes an isosurface of the cloudwater, along with
    // annotation user: a representation of the line along which values are plotted.
    // annotation user_end: <NULL>
    // resource *decorator.alignment:XmALIGNMENT_BEGINNING
    // page group: visualize
    //
    // decorator Annotate	pos=(197,150) size=382x44 style(Label), font=bold, value = <NULL>
    // annotation user_begin: 78
    // annotation user: this page creates the line using grid, then also places
    // annotation user: glyphs along the line.
    // annotation user_end: <NULL>
    // page group: makeline
    //
    // decorator Annotate	pos=(290,350) size=319x140 style(Label), font=bold, value = <NULL>
    // annotation user_begin: 342
    // annotation user: This page maps the first variable onto
    // annotation user: the line, then extracts only the x positions
    // annotation user: (thus the plot will be data vs x position).
    // annotation user: If the data are vector (as determined using
    // annotation user: Inquire) then the magnitude of the data
    // annotation user: is computed. Plot options are added using
    // annotation user: Options, and the line is colored. At the same
    // annotation user: time, appropriate axes labels are created.
    // annotation user_end: <NULL>
    // page group: line1
    //
    // decorator Annotate	pos=(178,83) size=429x60 style(Label), font=bold, value = <NULL>
    // annotation user_begin: 174
    // annotation user: As with the first line, the second variable is mapped onto the
    // annotation user: line, the x positions are extracted, the magnitude is taken if
    // annotation user: the data are vector, and plot options are added.
    // annotation user_end: <NULL>
    // page group: line2
    //
    // decorator Annotate	pos=(107,27) size=195x28 style(Label), font=bold, value = <NULL>
    // annotation user_begin: 27
    // annotation user: this page displays the plot
    // annotation user_end: <NULL>
    // page group: image
// network: end of macro body
CacheScene("Image_3", main_Image_3_out_1, main_Image_3_out_2);
CacheScene("Image_7", main_Image_7_out_1, main_Image_7_out_2);
}
main_Vector_1_in_1 = "Vector_1";
main_Vector_1_in_2 = NULL;
main_Vector_1_in_3 = [ 41000 3000 30000 ];
main_Vector_1_in_4 = NULL;
main_Vector_1_in_5 = NULL;
main_Vector_1_in_6 = NULL;
main_Vector_1_in_7 = NULL;
main_Vector_1_in_8 = NULL;
main_Vector_1_in_9 = NULL;
main_Vector_1_in_10 = NULL;
main_Vector_1_in_11 = NULL;
main_Vector_1_out_1 = [ 41000 3000 30000 ];
main_Integer_1_in_1 = "Integer_1";
main_Integer_1_in_2 = NULL;
main_Integer_1_in_3 = 42 ;
main_Integer_1_in_4 = NULL;
main_Integer_1_in_5 = NULL;
main_Integer_1_in_6 = NULL;
main_Integer_1_in_7 = NULL;
main_Integer_1_in_8 = NULL;
main_Integer_1_in_9 = NULL;
main_Integer_1_in_10 = NULL;
main_Integer_1_in_11 = NULL;
main_Integer_1_out_1 = 42 ;
main_Grid_1_in_2 = "line";
main_Grid_1_in_3 = {[30000 0 0]};
main_Grid_1_out_1 = NULL;
main_Glyph_1_in_2 = NULL;
main_Glyph_1_in_3 = NULL;
main_Glyph_1_in_4 = 500.000;
main_Glyph_1_in_5 = NULL;
main_Glyph_1_in_6 = NULL;
main_Glyph_1_in_7 = NULL;
main_Glyph_1_out_1 = NULL;
main_ShowConnections_1_out_1 = NULL;
main_Collect_1_out_1 = NULL;
main_Import_3_in_1 = "cloudwater";
main_Import_3_in_2 = NULL;
main_Import_3_in_3 = NULL;
main_Import_3_in_4 = NULL;
main_Import_3_in_5 = NULL;
main_Import_3_in_6 = NULL;
main_Import_3_out_1 = NULL;
main_Isosurface_1_in_2 = NULL;
main_Isosurface_1_in_3 = NULL;
main_Isosurface_1_in_4 = NULL;
main_Isosurface_1_in_5 = NULL;
main_Isosurface_1_in_6 = NULL;
main_Isosurface_1_out_1 = NULL;
main_Color_1_in_2 = NULL;
main_Color_1_in_3 = .45;
main_Color_1_in_4 = NULL;
main_Color_1_in_5 = NULL;
main_Color_1_out_1 = NULL;
main_Color_4_in_2 = "red";
main_Color_4_in_3 = NULL;
main_Color_4_in_4 = NULL;
main_Color_4_in_5 = NULL;
main_Color_4_out_1 = NULL;
main_Transmitter_1_out_1 = NULL;
main_Receiver_1_out_1 = NULL;
main_ShowBox_3_out_1 = NULL;
main_Collect_2_out_1 = NULL;
main_Transmitter_6_out_1 = NULL;
main_Receiver_8_out_1 = NULL;
main_Selector_2_in_1 = "Selector_2";
main_Selector_2_in_2 = "temperature" ;
main_Selector_2_in_3 = 1 ;
main_Selector_2_in_4 = NULL;
main_Selector_2_in_5 = NULL;
main_Selector_2_in_6 = NULL;
main_Selector_2_in_7 = NULL;
main_Selector_2_out_2 = "temperature" ;
main_Format_2_in_1 = "%s";
main_Format_2_out_1 = NULL;
main_Import_1_in_2 = NULL;
main_Import_1_in_3 = NULL;
main_Import_1_in_4 = NULL;
main_Import_1_in_5 = NULL;
main_Import_1_in_6 = NULL;
main_Import_1_out_1 = NULL;
main_Transmitter_4_out_1 = NULL;
main_Receiver_6_out_1 = NULL;
main_Map_1_in_3 = NULL;
main_Map_1_in_4 = NULL;
main_Map_1_out_1 = NULL;
main_Mark_1_in_2 = "positions";
main_Mark_1_out_1 = NULL;
main_Compute_1_in_1 = "$0.x";
main_Compute_1_out_1 = NULL;
main_Unmark_1_in_2 = "positions";
main_Unmark_1_out_1 = NULL;
main_Inquire_2_in_2 = "is scalar";
main_Inquire_2_in_3 = NULL;
main_Inquire_2_out_1 = NULL;
main_Compute_3_in_1 = "($1) ? $0 : mag($0)";
main_Compute_3_out_1 = NULL;
main_Transmitter_2_out_1 = NULL;
main_Receiver_2_out_1 = NULL;
main_Options_1_in_2 = "label";
main_Options_1_in_4 = "mark";
main_Options_1_in_5 = "triangle";
main_Options_1_out_1 = NULL;
main_Color_2_in_2 = "green";
main_Color_2_in_3 = NULL;
main_Color_2_in_4 = NULL;
main_Color_2_in_5 = NULL;
main_Color_2_out_1 = NULL;
main_Receiver_11_out_1 = NULL;
main_Selector_1_in_1 = "Selector_1";
main_Selector_1_in_2 = "rainwater" ;
main_Selector_1_in_3 = 0 ;
main_Selector_1_in_4 = NULL;
main_Selector_1_in_5 = NULL;
main_Selector_1_in_6 = NULL;
main_Selector_1_in_7 = NULL;
main_Selector_1_out_2 = "rainwater" ;
main_Format_1_in_1 = "%s";
main_Format_1_out_1 = NULL;
main_Import_2_in_2 = NULL;
main_Import_2_in_3 = NULL;
main_Import_2_in_4 = NULL;
main_Import_2_in_5 = NULL;
main_Import_2_in_6 = NULL;
main_Import_2_out_1 = NULL;
main_Transmitter_5_out_1 = NULL;
main_Receiver_7_out_1 = NULL;
main_Map_2_in_3 = NULL;
main_Map_2_in_4 = NULL;
main_Map_2_out_1 = NULL;
main_Mark_2_in_2 = "positions";
main_Mark_2_out_1 = NULL;
main_Compute_2_in_1 = "$0.x";
main_Compute_2_out_1 = NULL;
main_Unmark_2_in_2 = "positions";
main_Unmark_2_out_1 = NULL;
main_Inquire_1_in_2 = "is scalar";
main_Inquire_1_in_3 = NULL;
main_Inquire_1_out_1 = NULL;
main_Compute_4_in_1 = "$1 ? $0 : mag($0)";
main_Compute_4_out_1 = NULL;
main_Transmitter_3_out_1 = NULL;
main_Receiver_3_out_1 = NULL;
main_Options_2_in_2 = "label";
main_Options_2_in_4 = "mark";
main_Options_2_in_5 = "star";
main_Options_2_in_6 = "scatter";
main_Options_2_in_7 = 1;
main_Options_2_out_1 = NULL;
main_Color_3_in_2 = "cyan";
main_Color_3_in_3 = NULL;
main_Color_3_in_4 = NULL;
main_Color_3_in_5 = NULL;
main_Color_3_out_1 = NULL;
macro Image(
        id,
        object,
        where,
        useVector,
        to,
        from,
        width,
        resolution,
        aspect,
        up,
        viewAngle,
        perspective,
        options,
        buttonState = 1,
        buttonUpApprox = "none",
        buttonDownApprox = "none",
        buttonUpDensity = 1,
        buttonDownDensity = 1,
        renderMode = 0,
        defaultCamera,
        reset,
        backgroundColor,
        throttle,
        RECenable = 0,
        RECfile,
        RECformat,
        RECresolution,
        RECaspect,
        AAenable = 0,
        AAlabels,
        AAticks,
        AAcorners,
        AAframe,
        AAadjust,
        AAcursor,
        AAgrid,
        AAcolors,
        AAannotation,
        AAlabelscale,
        AAfont,
        interactionMode,
        title,
        AAxTickLocs,
        AAyTickLocs,
        AAzTickLocs,
        AAxTickLabels,
        AAyTickLabels,
        AAzTickLabels) -> (
        object,
        camera,
        where)
{
    ImageMessage(
        id,
        backgroundColor,
        throttle,
        RECenable,
        RECfile,
        RECformat,
        RECresolution,
        RECaspect,
        AAenable,
        AAlabels,
        AAticks,
        AAcorners,
        AAframe,
        AAadjust,
        AAcursor,
        AAgrid,
        AAcolors,
        AAannotation,
        AAlabelscale,
        AAfont,
        AAxTickLocs,
        AAyTickLocs,
        AAzTickLocs,
        AAxTickLabels,
        AAyTickLabels,
        AAzTickLabels,
        interactionMode,
        title,
        renderMode,
        buttonUpApprox,
        buttonDownApprox,
        buttonUpDensity,
        buttonDownDensity) [instance: 1, cache: 1];
    autoCamera =
        AutoCamera(
            object,
            "front",
            object,
            resolution,
            aspect,
            [0,1,0],
            perspective,
            viewAngle,
            backgroundColor) [instance: 1, cache: 1];
    realCamera =
        Camera(
            to,
            from,
            width,
            resolution,
            aspect,
            up,
            perspective,
            viewAngle,
            backgroundColor) [instance: 1, cache: 1];
    coloredDefaultCamera = 
	 UpdateCamera(defaultCamera,
            background=backgroundColor) [instance: 1, cache: 1];
    nullDefaultCamera =
        Inquire(defaultCamera,
            "is null + 1") [instance: 1, cache: 1];
    resetCamera =
        Switch(
            nullDefaultCamera,
            coloredDefaultCamera,
            autoCamera) [instance: 1, cache: 1];
    resetNull = 
        Inquire(
            reset,
            "is null + 1") [instance: 2, cache: 1];
    reset =
        Switch(
            resetNull,
            reset,
            0) [instance: 2, cache: 1];
    whichCamera =
        Compute(
            "($0 != 0 || $1 == 0) ? 1 : 2",
            reset,
            useVector) [instance: 1, cache: 1];
    camera = Switch(
            whichCamera,
            resetCamera,
            realCamera) [instance: 3, cache: 1];
    AAobject =
        AutoAxes(
            object,
            camera,
            AAlabels,
            AAticks,
            AAcorners,
            AAframe,
            AAadjust,
            AAcursor,
            AAgrid,
            AAcolors,
            AAannotation,
            AAlabelscale,
            AAfont,
            AAxTickLocs,
            AAyTickLocs,
            AAzTickLocs,
            AAxTickLabels,
            AAyTickLabels,
            AAzTickLabels) [instance: 1, cache: 1];
    switchAAenable = Compute("$0+1",
	     AAenable) [instance: 2, cache: 1];
    object = Switch(
	     switchAAenable,
	     object,
	     AAobject) [instance:4, cache: 1];
    SWapproximation_options =
        Switch(
            buttonState,
            buttonUpApprox,
            buttonDownApprox) [instance: 5, cache: 1];
    SWdensity_options =
        Switch(
            buttonState,
            buttonUpDensity,
            buttonDownDensity) [instance: 6, cache: 1];
    HWapproximation_options =
        Format(
            "%s,%s",
            buttonDownApprox,
            buttonUpApprox) [instance: 1, cache: 1];
    HWdensity_options =
        Format(
            "%d,%d",
            buttonDownDensity,
            buttonUpDensity) [instance: 2, cache: 1];
    switchRenderMode = Compute(
	     "$0+1",
	     renderMode) [instance: 3, cache: 1];
    approximation_options = Switch(
	     switchRenderMode,
            SWapproximation_options,
	     HWapproximation_options) [instance: 7, cache: 1];
    density_options = Switch(
	     switchRenderMode,
            SWdensity_options,
            HWdensity_options) [instance: 8, cache: 1];
    renderModeString = Switch(
            switchRenderMode,
            "software",
            "hardware")[instance: 9, cache: 1];
    object_tag = Inquire(
            object,
            "object tag")[instance: 3, cache: 1];
    annoted_object =
        Options(
            object,
            "send boxes",
            0,
            "cache",
            1,
            "object tag",
            object_tag,
            "ddcamera",
            whichCamera,
            "rendering approximation",
            approximation_options,
            "render every",
            density_options,
            "button state",
            buttonState,
            "rendering mode",
            renderModeString) [instance: 1, cache: 1];
    RECresNull =
        Inquire(
            RECresolution,
            "is null + 1") [instance: 4, cache: 1];
    ImageResolution =
        Inquire(
            camera,
            "camera resolution") [instance: 5, cache: 1];
    RECresolution =
        Switch(
            RECresNull,
            RECresolution,
            ImageResolution) [instance: 10, cache: 1];
    RECaspectNull =
        Inquire(
            RECaspect,
            "is null + 1") [instance: 6, cache: 1];
    ImageAspect =
        Inquire(
            camera,
            "camera aspect") [instance: 7, cache: 1];
    RECaspect =
        Switch(
            RECaspectNull,
            RECaspect,
            ImageAspect) [instance: 11, cache: 1];
    switchRECenable = Compute(
          "$0 == 0 ? 1 : (($2 == $3) && ($4 == $5)) ? ($1 == 1 ? 2 : 3) : 4",
            RECenable,
            switchRenderMode,
            RECresolution,
            ImageResolution,
            RECaspect,
	     ImageAspect) [instance: 4, cache: 1];
    NoRECobject, RECNoRerenderObject, RECNoRerHW, RECRerenderObject = Route(switchRECenable, annoted_object);
    Display(
        NoRECobject,
        camera,
        where,
        throttle) [instance: 1, cache: 1];
    image =
        Render(
            RECNoRerenderObject,
            camera) [instance: 1, cache: 1];
    Display(
        image,
        NULL,
        where,
        throttle) [instance: 2, cache: 1];
    WriteImage(
        image,
        RECfile,
        RECformat) [instance: 1, cache: 1];
    rec_where = Display(
        RECNoRerHW,
        camera,
        where,
        throttle) [instance: 1, cache: 0];
    rec_image = ReadImageWindow(
        rec_where) [instance: 1, cache: 1];
    WriteImage(
        rec_image,
        RECfile,
        RECformat) [instance: 1, cache: 1];
    RECupdateCamera =
	UpdateCamera(
	    camera,
	    resolution=RECresolution,
	    aspect=RECaspect) [instance: 2, cache: 1];
    Display(
        RECRerenderObject,
        camera,
        where,
        throttle) [instance: 1, cache: 1];
    RECRerenderObject =
	ScaleScreen(
	    RECRerenderObject,
	    NULL,
	    RECresolution,
	    camera) [instance: 1, cache: 1];
    image =
        Render(
            RECRerenderObject,
            RECupdateCamera) [instance: 2, cache: 1];
    WriteImage(
        image,
        RECfile,
        RECformat) [instance: 2, cache: 1];
}
main_Image_3_in_1 = "Image_3";
main_Image_3_in_3 = "X24,,";
main_Image_3_in_4 = 1;
main_Image_3_in_5 = [50000 7750 27000];
main_Image_3_in_6 = [-5182.24 59391.7 305147];
main_Image_3_in_7 = 154464.0;
main_Image_3_in_8 = 640;
main_Image_3_in_9 = 0.75;
main_Image_3_in_10 = [0.0178228 0.98367 -0.179096];
main_Image_3_in_11 = NULL;
main_Image_3_in_12 = 0;
main_Image_3_in_13 = NULL;
main_Image_3_in_14 = 1;
main_Image_3_in_15 = NULL;
main_Image_3_in_16 = NULL;
main_Image_3_in_17 = NULL;
main_Image_3_in_18 = NULL;
main_Image_3_in_19 = 0;
main_Image_3_in_20 = NULL;
main_Image_3_in_21 = NULL;
main_Image_3_in_22 = NULL;
main_Image_3_in_23 = NULL;
main_Image_3_in_25 = NULL;
main_Image_3_in_26 = NULL;
main_Image_3_in_27 = NULL;
main_Image_3_in_28 = NULL;
main_Image_3_in_29 = NULL;
main_Image_3_in_30 = NULL;
main_Image_3_in_31 = NULL;
main_Image_3_in_32 = NULL;
main_Image_3_in_33 = NULL;
main_Image_3_in_34 = NULL;
main_Image_3_in_35 = NULL;
main_Image_3_in_36 = NULL;
main_Image_3_in_37 = NULL;
main_Image_3_in_38 = NULL;
main_Image_3_in_39 = NULL;
main_Image_3_in_40 = NULL;
main_Image_3_in_41 = NULL;
main_Image_3_in_42 = NULL;
main_Image_3_in_43 = NULL;
main_Image_3_in_44 = NULL;
main_Image_3_in_45 = NULL;
main_Image_3_in_46 = NULL;
main_Image_3_in_47 = NULL;
main_Image_3_in_48 = NULL;
main_Transmitter_7_out_1 = NULL;
main_Receiver_9_out_1 = NULL;
main_Receiver_5_out_1 = NULL;
main_List_1_in_1 = {"x location"};
main_List_1_out_1 = NULL;
main_Transmitter_8_out_1 = NULL;
main_Receiver_10_out_1 = NULL;
main_Transmitter_9_out_1 = NULL;
main_Receiver_12_out_1 = NULL;
main_Receiver_4_out_1 = NULL;
main_Plot_1_in_3 = NULL;
main_Plot_1_in_4 = NULL;
main_Plot_1_in_5 = NULL;
main_Plot_1_in_6 = NULL;
main_Plot_1_in_7 = NULL;
main_Plot_1_in_8 = NULL;
main_Plot_1_in_9 = NULL;
main_Plot_1_in_10 = NULL;
main_Plot_1_in_11 = NULL;
main_Plot_1_in_12 = NULL;
main_Plot_1_in_13 = "roman_d";
main_Plot_1_in_16 = NULL;
main_Plot_1_in_17 = NULL;
main_Plot_1_in_18 = NULL;
main_Plot_1_in_19 = NULL;
main_Plot_1_in_20 = NULL;
main_Plot_1_in_21 = NULL;
main_Plot_1_in_22 = NULL;
main_Plot_1_in_23 = NULL;
main_Plot_1_in_24 = NULL;
main_Plot_1_out_1 = NULL;
macro Image(
        id,
        object,
        where,
        useVector,
        to,
        from,
        width,
        resolution,
        aspect,
        up,
        viewAngle,
        perspective,
        options,
        buttonState = 1,
        buttonUpApprox = "none",
        buttonDownApprox = "none",
        buttonUpDensity = 1,
        buttonDownDensity = 1,
        renderMode = 0,
        defaultCamera,
        reset,
        backgroundColor,
        throttle,
        RECenable = 0,
        RECfile,
        RECformat,
        RECresolution,
        RECaspect,
        AAenable = 0,
        AAlabels,
        AAticks,
        AAcorners,
        AAframe,
        AAadjust,
        AAcursor,
        AAgrid,
        AAcolors,
        AAannotation,
        AAlabelscale,
        AAfont,
        interactionMode,
        title,
        AAxTickLocs,
        AAyTickLocs,
        AAzTickLocs,
        AAxTickLabels,
        AAyTickLabels,
        AAzTickLabels) -> (
        object,
        camera,
        where)
{
    ImageMessage(
        id,
        backgroundColor,
        throttle,
        RECenable,
        RECfile,
        RECformat,
        RECresolution,
        RECaspect,
        AAenable,
        AAlabels,
        AAticks,
        AAcorners,
        AAframe,
        AAadjust,
        AAcursor,
        AAgrid,
        AAcolors,
        AAannotation,
        AAlabelscale,
        AAfont,
        AAxTickLocs,
        AAyTickLocs,
        AAzTickLocs,
        AAxTickLabels,
        AAyTickLabels,
        AAzTickLabels,
        interactionMode,
        title,
        renderMode,
        buttonUpApprox,
        buttonDownApprox,
        buttonUpDensity,
        buttonDownDensity) [instance: 1, cache: 1];
    autoCamera =
        AutoCamera(
            object,
            "front",
            object,
            resolution,
            aspect,
            [0,1,0],
            perspective,
            viewAngle,
            backgroundColor) [instance: 1, cache: 1];
    realCamera =
        Camera(
            to,
            from,
            width,
            resolution,
            aspect,
            up,
            perspective,
            viewAngle,
            backgroundColor) [instance: 1, cache: 1];
    coloredDefaultCamera = 
	 UpdateCamera(defaultCamera,
            background=backgroundColor) [instance: 1, cache: 1];
    nullDefaultCamera =
        Inquire(defaultCamera,
            "is null + 1") [instance: 1, cache: 1];
    resetCamera =
        Switch(
            nullDefaultCamera,
            coloredDefaultCamera,
            autoCamera) [instance: 1, cache: 1];
    resetNull = 
        Inquire(
            reset,
            "is null + 1") [instance: 2, cache: 1];
    reset =
        Switch(
            resetNull,
            reset,
            0) [instance: 2, cache: 1];
    whichCamera =
        Compute(
            "($0 != 0 || $1 == 0) ? 1 : 2",
            reset,
            useVector) [instance: 1, cache: 1];
    camera = Switch(
            whichCamera,
            resetCamera,
            realCamera) [instance: 3, cache: 1];
    AAobject =
        AutoAxes(
            object,
            camera,
            AAlabels,
            AAticks,
            AAcorners,
            AAframe,
            AAadjust,
            AAcursor,
            AAgrid,
            AAcolors,
            AAannotation,
            AAlabelscale,
            AAfont,
            AAxTickLocs,
            AAyTickLocs,
            AAzTickLocs,
            AAxTickLabels,
            AAyTickLabels,
            AAzTickLabels) [instance: 1, cache: 1];
    switchAAenable = Compute("$0+1",
	     AAenable) [instance: 2, cache: 1];
    object = Switch(
	     switchAAenable,
	     object,
	     AAobject) [instance:4, cache: 1];
    SWapproximation_options =
        Switch(
            buttonState,
            buttonUpApprox,
            buttonDownApprox) [instance: 5, cache: 1];
    SWdensity_options =
        Switch(
            buttonState,
            buttonUpDensity,
            buttonDownDensity) [instance: 6, cache: 1];
    HWapproximation_options =
        Format(
            "%s,%s",
            buttonDownApprox,
            buttonUpApprox) [instance: 1, cache: 1];
    HWdensity_options =
        Format(
            "%d,%d",
            buttonDownDensity,
            buttonUpDensity) [instance: 2, cache: 1];
    switchRenderMode = Compute(
	     "$0+1",
	     renderMode) [instance: 3, cache: 1];
    approximation_options = Switch(
	     switchRenderMode,
            SWapproximation_options,
	     HWapproximation_options) [instance: 7, cache: 1];
    density_options = Switch(
	     switchRenderMode,
            SWdensity_options,
            HWdensity_options) [instance: 8, cache: 1];
    renderModeString = Switch(
            switchRenderMode,
            "software",
            "hardware")[instance: 9, cache: 1];
    object_tag = Inquire(
            object,
            "object tag")[instance: 3, cache: 1];
    annoted_object =
        Options(
            object,
            "send boxes",
            0,
            "cache",
            1,
            "object tag",
            object_tag,
            "ddcamera",
            whichCamera,
            "rendering approximation",
            approximation_options,
            "render every",
            density_options,
            "button state",
            buttonState,
            "rendering mode",
            renderModeString) [instance: 1, cache: 1];
    RECresNull =
        Inquire(
            RECresolution,
            "is null + 1") [instance: 4, cache: 1];
    ImageResolution =
        Inquire(
            camera,
            "camera resolution") [instance: 5, cache: 1];
    RECresolution =
        Switch(
            RECresNull,
            RECresolution,
            ImageResolution) [instance: 10, cache: 1];
    RECaspectNull =
        Inquire(
            RECaspect,
            "is null + 1") [instance: 6, cache: 1];
    ImageAspect =
        Inquire(
            camera,
            "camera aspect") [instance: 7, cache: 1];
    RECaspect =
        Switch(
            RECaspectNull,
            RECaspect,
            ImageAspect) [instance: 11, cache: 1];
    switchRECenable = Compute(
          "$0 == 0 ? 1 : (($2 == $3) && ($4 == $5)) ? ($1 == 1 ? 2 : 3) : 4",
            RECenable,
            switchRenderMode,
            RECresolution,
            ImageResolution,
            RECaspect,
	     ImageAspect) [instance: 4, cache: 1];
    NoRECobject, RECNoRerenderObject, RECNoRerHW, RECRerenderObject = Route(switchRECenable, annoted_object);
    Display(
        NoRECobject,
        camera,
        where,
        throttle) [instance: 1, cache: 1];
    image =
        Render(
            RECNoRerenderObject,
            camera) [instance: 1, cache: 1];
    Display(
        image,
        NULL,
        where,
        throttle) [instance: 2, cache: 1];
    WriteImage(
        image,
        RECfile,
        RECformat) [instance: 1, cache: 1];
    rec_where = Display(
        RECNoRerHW,
        camera,
        where,
        throttle) [instance: 1, cache: 0];
    rec_image = ReadImageWindow(
        rec_where) [instance: 1, cache: 1];
    WriteImage(
        rec_image,
        RECfile,
        RECformat) [instance: 1, cache: 1];
    RECupdateCamera =
	UpdateCamera(
	    camera,
	    resolution=RECresolution,
	    aspect=RECaspect) [instance: 2, cache: 1];
    Display(
        RECRerenderObject,
        camera,
        where,
        throttle) [instance: 1, cache: 1];
    RECRerenderObject =
	ScaleScreen(
	    RECRerenderObject,
	    NULL,
	    RECresolution,
	    camera) [instance: 1, cache: 1];
    image =
        Render(
            RECRerenderObject,
            RECupdateCamera) [instance: 2, cache: 1];
    WriteImage(
        image,
        RECfile,
        RECformat) [instance: 2, cache: 1];
}
main_Image_7_in_1 = "Image_7";
main_Image_7_in_3 = "X24,,";
main_Image_7_in_4 = 1;
main_Image_7_in_5 = [37124.1 5086.11 0];
main_Image_7_in_6 = [37124.1 5086.11 394102];
main_Image_7_in_7 = 211199.0;
main_Image_7_in_8 = 631;
main_Image_7_in_9 = 0.638;
main_Image_7_in_10 = [0 1 0];
main_Image_7_in_11 = NULL;
main_Image_7_in_12 = 0;
main_Image_7_in_13 = NULL;
main_Image_7_in_14 = 1;
main_Image_7_in_15 = NULL;
main_Image_7_in_16 = NULL;
main_Image_7_in_17 = NULL;
main_Image_7_in_18 = NULL;
main_Image_7_in_19 = 0;
main_Image_7_in_20 = NULL;
main_Image_7_in_21 = 1;
main_Image_7_in_22 = NULL;
main_Image_7_in_23 = NULL;
main_Image_7_in_25 = NULL;
main_Image_7_in_26 = NULL;
main_Image_7_in_27 = NULL;
main_Image_7_in_28 = NULL;
main_Image_7_in_29 = NULL;
main_Image_7_in_30 = NULL;
main_Image_7_in_31 = NULL;
main_Image_7_in_32 = NULL;
main_Image_7_in_33 = NULL;
main_Image_7_in_34 = NULL;
main_Image_7_in_35 = NULL;
main_Image_7_in_36 = NULL;
main_Image_7_in_37 = NULL;
main_Image_7_in_38 = NULL;
main_Image_7_in_39 = NULL;
main_Image_7_in_40 = NULL;
main_Image_7_in_41 = NULL;
main_Image_7_in_42 = NULL;
main_Image_7_in_43 = NULL;
main_Image_7_in_44 = NULL;
main_Image_7_in_45 = NULL;
main_Image_7_in_46 = NULL;
main_Image_7_in_47 = NULL;
main_Image_7_in_48 = NULL;
Executive("product version 3 1 4");
$sync
main();
