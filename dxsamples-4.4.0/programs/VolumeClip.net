//
// time: Tue Apr  8 12:01:22 1997
//
// version: 3.1.1 (format), 3.1.4 (DX Beta)
//
//
//
// macro reference (indirect): ClipSurfaceMacro ClipSurfaceMacro.net
//
// macro reference (direct): ClipVolumeMacro ClipVolumeMacro.net
include "ClipVolumeMacro.net"
//
// MODULE main
//
// comment: This visual program shows the use of the ClipVolume macro, which clips a surface within a volume to a plane.
// workspace: width = 692, height = 616
// layout: snap = 0, width = 50, height = 50, align = NN
//
macro main(
) -> (
) {
    // 
    // node Selector[2]: x = 599, y = 392, inputs = 7, label = Selector
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Selector_2"
    // input[2]: defaulting = 0, visible = 0, type = 32, value = "with second clipping plane" 
    // input[3]: defaulting = 0, visible = 0, type = 29, value = 3 
    // input[4]: defaulting = 1, visible = 1, type = 16777248, value = { "original boundary" "with first clipping plane" "with second clipping plane" }
    // input[5]: defaulting = 1, visible = 0, type = 16777245, value = { 1 2 3 }
    // output[1]: visible = 1, type = 29, value = 3 
    // output[2]: visible = 1, type = 32, value = "with second clipping plane" 
    //
    // 
    // node Construct[1]: x = 11, y = 36, inputs = 4, label = Construct
    // input[1]: defaulting = 0, visible = 1, type = 16777224, value = {[-1 -1 -1]}
    // input[2]: defaulting = 0, visible = 1, type = 16777224, value = {[.1 .1 .1]}
    // input[3]: defaulting = 0, visible = 1, type = 8, value = [21 21 21]
    //
main_Construct_1_out_1 = 
    Construct(
    main_Construct_1_in_1,
    main_Construct_1_in_2,
    main_Construct_1_in_3,
    main_Construct_1_in_4
    ) [instance: 1, cache: 1];
    // 
    // node Replace[1]: x = 7, y = 122, inputs = 4, label = Replace
    // input[3]: defaulting = 0, visible = 1, type = 32, value = "positions"
    //
main_Replace_1_out_1 = 
    Replace(
    main_Construct_1_out_1,
    main_Construct_1_out_1,
    main_Replace_1_in_3,
    main_Replace_1_in_4
    ) [instance: 1, cache: 1];
    // 
    // node Compute[1]: x = 42, y = 197, inputs = 3, label = Compute
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "mag(abs($0)-[0.5,0.5,0.5])"
    // expression: value = mag(abs(a)-[0.5,0.5,0.5])
    // name[2]: value = a
    // name[3]: value = b
    //
main_Compute_1_out_1 = 
    Compute(
    main_Compute_1_in_1,
    main_Replace_1_out_1,
    main_Compute_1_in_3
    ) [instance: 1, cache: 1];
    // 
    // node ShowBoundary[1]: x = 208, y = 320, inputs = 2, label = ShowBoundary
    //
main_ShowBoundary_1_out_1 = 
    ShowBoundary(
    main_Compute_1_out_1,
    main_ShowBoundary_1_in_2
    ) [instance: 1, cache: 1];
    // 
    // node Transmitter[18]: x = 130, y = 272, inputs = 1, label = volume
    //
volume = main_Compute_1_out_1;
    // 
    // node Receiver[24]: x = 451, y = 241, inputs = 1, label = volume
    //
main_Receiver_24_out_1[cache: 0] = volume;
    // 
    // node Vector[1]: x = 344, y = 315, inputs = 11, label = Vector
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Vector_1"
    // input[3]: defaulting = 0, visible = 0, type = 8, value = [ 0 1 0 ]
    // input[5]: defaulting = 1, visible = 0, type = 8, value = [ -1000000.0 -1000000.0 -1000000.0 ]
    // input[6]: defaulting = 1, visible = 0, type = 8, value = [ 1000000.0 1000000.0 1000000.0 ]
    // input[7]: defaulting = 1, visible = 0, type = 8, value = [       1        1        1]
    // input[9]: defaulting = 1, visible = 0, type = 8, value = [ 5.0 5.0 5.0 ]
    // output[1]: visible = 1, type = 8, value = [ 0 1 0 ]
    //
    // 
    // node Vector[2]: x = 411, y = 316, inputs = 11, label = Vector
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Vector_2"
    // input[3]: defaulting = 0, visible = 0, type = 8, value = [ 1 2 2 ]
    // input[5]: defaulting = 1, visible = 0, type = 8, value = [ -1000000.0 -1000000.0 -1000000.0 ]
    // input[6]: defaulting = 1, visible = 0, type = 8, value = [ 1000000.0 1000000.0 1000000.0 ]
    // input[7]: defaulting = 1, visible = 0, type = 8, value = [       1        1        1]
    // input[9]: defaulting = 1, visible = 0, type = 8, value = [ 5.0 5.0 5.0 ]
    // output[1]: visible = 1, type = 8, value = [ 1 2 2 ]
    //
    // 
    // node ClipVolumeMacro[1]: x = 311, y = 431, inputs = 4, label = ClipVolumeMacro
    //
main_ClipVolumeMacro_1_out_1 = 
    ClipVolumeMacro(
    main_ShowBoundary_1_out_1,
    main_Receiver_24_out_1,
    main_Vector_1_out_1,
    main_Vector_2_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Vector[3]: x = 498, y = 310, inputs = 11, label = Vector
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Vector_3"
    // input[3]: defaulting = 0, visible = 0, type = 8, value = [ 1 1 1 ]
    // input[5]: defaulting = 1, visible = 0, type = 8, value = [ -1000000.0 -1000000.0 -1000000.0 ]
    // input[6]: defaulting = 1, visible = 0, type = 8, value = [ 1000000.0 1000000.0 1000000.0 ]
    // input[7]: defaulting = 1, visible = 0, type = 8, value = [       1        1        1]
    // input[9]: defaulting = 1, visible = 0, type = 8, value = [ 5.0 5.0 5.0 ]
    // output[1]: visible = 1, type = 8, value = [ 1 1 1 ]
    //
    // 
    // node Vector[4]: x = 570, y = 315, inputs = 11, label = Vector
    // input[1]: defaulting = 0, visible = 0, type = 32, value = "Vector_4"
    // input[3]: defaulting = 0, visible = 0, type = 8, value = [ -1 0 2 ]
    // input[5]: defaulting = 1, visible = 0, type = 8, value = [ -1000000.0 -1000000.0 -1000000.0 ]
    // input[6]: defaulting = 1, visible = 0, type = 8, value = [ 1000000.0 1000000.0 1000000.0 ]
    // input[7]: defaulting = 1, visible = 0, type = 8, value = [       1        1        1]
    // input[9]: defaulting = 1, visible = 0, type = 8, value = [ 5.0 5.0 5.0 ]
    // output[1]: visible = 1, type = 8, value = [ -1 0 2 ]
    //
    // 
    // node ClipVolumeMacro[2]: x = 446, y = 498, inputs = 4, label = ClipVolumeMacro
    //
main_ClipVolumeMacro_2_out_1 = 
    ClipVolumeMacro(
    main_ClipVolumeMacro_1_out_1,
    main_Receiver_24_out_1,
    main_Vector_3_out_1,
    main_Vector_4_out_1
    ) [instance: 2, cache: 1];
    // 
    // node Switch[10]: x = 596, y = 509, inputs = 4, label = Switch
    //
main_Switch_10_out_1 = 
    Switch(
    main_Selector_2_out_1,
    main_ShowBoundary_1_out_1,
    main_ClipVolumeMacro_1_out_1,
    main_ClipVolumeMacro_2_out_1
    ) [instance: 10, cache: 1];
    // 
    // node FaceNormals[1]: x = 284, y = 527, inputs = 1, label = FaceNormals
    //
main_FaceNormals_1_out_1 = 
    FaceNormals(
    main_Switch_10_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Receiver[25]: x = 193, y = 433, inputs = 1, label = volume
    //
main_Receiver_25_out_1[cache: 0] = volume;
    // 
    // node AutoColor[1]: x = 185, y = 517, inputs = 10, label = AutoColor
    //
main_AutoColor_1_out_1,
main_AutoColor_1_out_2 = 
    AutoColor(
    main_FaceNormals_1_out_1,
    main_AutoColor_1_in_2,
    main_AutoColor_1_in_3,
    main_AutoColor_1_in_4,
    main_AutoColor_1_in_5,
    main_AutoColor_1_in_6,
    main_Receiver_25_out_1,
    main_AutoColor_1_in_8,
    main_AutoColor_1_in_9,
    main_AutoColor_1_in_10
    ) [instance: 1, cache: 1];
    // 
    // node ShowBox[1]: x = 23, y = 358, inputs = 1, label = ShowBox
    //
main_ShowBox_1_out_1,
main_ShowBox_1_out_2 = 
    ShowBox(
    main_Compute_1_out_1
    ) [instance: 1, cache: 1];
    // 
    // node Collect[1]: x = 94, y = 526, inputs = 3, label = Collect
    //
main_Collect_1_out_1 = 
    Collect(
    main_ShowBox_1_out_1,
    main_AutoColor_1_out_1,
    main_Collect_1_in_3
    ) [instance: 1, cache: 1];
    // 
    // node Image[1]: x = 4, y = 554, inputs = 48, label = Image
    // input[1]: defaulting = 0, visible = 0, type = 67108863, value = "Image_1"
    // input[4]: defaulting = 0, visible = 0, type = 1, value = 1
    // input[5]: defaulting = 0, visible = 0, type = 8, value = [0 0 0]
    // input[6]: defaulting = 0, visible = 0, type = 8, value = [4.15999 -3.73732 6.67107]
    // input[7]: defaulting = 1, visible = 0, type = 5, value = 4.66499
    // input[8]: defaulting = 0, visible = 0, type = 1, value = 640
    // input[9]: defaulting = 0, visible = 0, type = 5, value = 0.75
    // input[10]: defaulting = 0, visible = 0, type = 8, value = [0.826221 -0.0765712 -0.558118]
    // input[11]: defaulting = 0, visible = 0, type = 5, value = 30.0001
    // input[12]: defaulting = 0, visible = 0, type = 1, value = 1
    // input[14]: defaulting = 0, visible = 0, type = 1, value = 1
    // input[15]: defaulting = 1, visible = 0, type = 32, value = "none"
    // input[16]: defaulting = 1, visible = 0, type = 32, value = "none"
    // input[17]: defaulting = 1, visible = 0, type = 1, value = 1
    // input[18]: defaulting = 1, visible = 0, type = 1, value = 1
    // input[19]: defaulting = 0, visible = 0, type = 1, value = 0
    // input[29]: defaulting = 1, visible = 0, type = 3, value = 0
    // input[41]: defaulting = 0, visible = 0, type = 32, value = "rotate"
    // depth: value = 8
    // window: position = (0.4547,0.0918), size = 0.5109x0.5117
    // internal caching: 1
    //
main_Image_1_out_1,
main_Image_1_out_2,
main_Image_1_out_3 = 
    Image(
    main_Image_1_in_1,
    main_Collect_1_out_1,
    main_Image_1_in_3,
    main_Image_1_in_4,
    main_Image_1_in_5,
    main_Image_1_in_6,
    main_Image_1_in_7,
    main_Image_1_in_8,
    main_Image_1_in_9,
    main_Image_1_in_10,
    main_Image_1_in_11,
    main_Image_1_in_12,
    main_Image_1_in_13,
    main_Image_1_in_14,
    main_Image_1_in_15,
    main_Image_1_in_16,
    main_Image_1_in_17,
    main_Image_1_in_18,
    main_Image_1_in_19,
    main_Image_1_in_20,
    main_Image_1_in_21,
    main_Image_1_in_22,
    main_Image_1_in_23,
    main_Image_1_in_24,
    main_Image_1_in_25,
    main_Image_1_in_26,
    main_Image_1_in_27,
    main_Image_1_in_28,
    main_Image_1_in_29,
    main_Image_1_in_30,
    main_Image_1_in_31,
    main_Image_1_in_32,
    main_Image_1_in_33,
    main_Image_1_in_34,
    main_Image_1_in_35,
    main_Image_1_in_36,
    main_Image_1_in_37,
    main_Image_1_in_38,
    main_Image_1_in_39,
    main_Image_1_in_40,
    main_Image_1_in_41,
    main_Image_1_in_42,
    main_Image_1_in_43,
    main_Image_1_in_44,
    main_Image_1_in_45,
    main_Image_1_in_46,
    main_Image_1_in_47,
    main_Image_1_in_48
    ) [instance: 1, cache: 1];
    //
    // decorator Annotate	pos=(127,16) size=507x220 style(Label), value = <NULL>
    // annotation user_begin: 825
    // annotation user: This network is an example of the use of the ClipVolume macro.
    // annotation user: Given a surface representing a boundary within a volume, the
    // annotation user: volume itself, and the definition of a plane (given as a point/normal
    // annotation user: pair, as in MapToPlane), it clips the surface against the plane and
    // annotation user: adds a cap for the resulting resulting hole, found by intersecting
    // annotation user: the volume with the clipping plane.  If the surfaces represent 
    // annotation user: a capped isosurface, the intersection surface is clipped at the isovalue, 
    // annotation user: using the Isosurface value and CappedIsosurface capDir attributes.
    // annotation user: If the input surface is already the result of previous applications of
    // annotation user: this macro, the cap is clipped by the previous clipping planes, which
    // annotation user: are found in the ClipVolume planes attribute, to which the current plane
    // annotation user: is added and attached to the result as the new ClipVolume planes 
    // annotation user: attribute.
    // annotation user_end: <NULL>
// network: end of macro body
CacheScene("Image_1", main_Image_1_out_1, main_Image_1_out_2);
}
main_Selector_2_in_1 = "Selector_2";
main_Selector_2_in_2 = "with second clipping plane" ;
main_Selector_2_in_3 = 3 ;
main_Selector_2_in_4 = NULL;
main_Selector_2_in_5 = NULL;
main_Selector_2_in_6 = NULL;
main_Selector_2_in_7 = NULL;
main_Selector_2_out_1 = 3 ;
main_Construct_1_in_1 = {[-1 -1 -1]};
main_Construct_1_in_2 = {[.1 .1 .1]};
main_Construct_1_in_3 = [21 21 21];
main_Construct_1_in_4 = NULL;
main_Construct_1_out_1 = NULL;
main_Replace_1_in_3 = "positions";
main_Replace_1_in_4 = NULL;
main_Replace_1_out_1 = NULL;
main_Compute_1_in_1 = "mag(abs($0)-[0.5,0.5,0.5])";
main_Compute_1_in_3 = NULL;
main_Compute_1_out_1 = NULL;
main_ShowBoundary_1_in_2 = NULL;
main_ShowBoundary_1_out_1 = NULL;
main_Transmitter_18_out_1 = NULL;
main_Receiver_24_out_1 = NULL;
main_Vector_1_in_1 = "Vector_1";
main_Vector_1_in_2 = NULL;
main_Vector_1_in_3 = [ 0 1 0 ];
main_Vector_1_in_4 = NULL;
main_Vector_1_in_5 = NULL;
main_Vector_1_in_6 = NULL;
main_Vector_1_in_7 = NULL;
main_Vector_1_in_8 = NULL;
main_Vector_1_in_9 = NULL;
main_Vector_1_in_10 = NULL;
main_Vector_1_in_11 = NULL;
main_Vector_1_out_1 = [ 0 1 0 ];
main_Vector_2_in_1 = "Vector_2";
main_Vector_2_in_2 = NULL;
main_Vector_2_in_3 = [ 1 2 2 ];
main_Vector_2_in_4 = NULL;
main_Vector_2_in_5 = NULL;
main_Vector_2_in_6 = NULL;
main_Vector_2_in_7 = NULL;
main_Vector_2_in_8 = NULL;
main_Vector_2_in_9 = NULL;
main_Vector_2_in_10 = NULL;
main_Vector_2_in_11 = NULL;
main_Vector_2_out_1 = [ 1 2 2 ];
main_ClipVolumeMacro_1_out_1 = NULL;
main_Vector_3_in_1 = "Vector_3";
main_Vector_3_in_2 = NULL;
main_Vector_3_in_3 = [ 1 1 1 ];
main_Vector_3_in_4 = NULL;
main_Vector_3_in_5 = NULL;
main_Vector_3_in_6 = NULL;
main_Vector_3_in_7 = NULL;
main_Vector_3_in_8 = NULL;
main_Vector_3_in_9 = NULL;
main_Vector_3_in_10 = NULL;
main_Vector_3_in_11 = NULL;
main_Vector_3_out_1 = [ 1 1 1 ];
main_Vector_4_in_1 = "Vector_4";
main_Vector_4_in_2 = NULL;
main_Vector_4_in_3 = [ -1 0 2 ];
main_Vector_4_in_4 = NULL;
main_Vector_4_in_5 = NULL;
main_Vector_4_in_6 = NULL;
main_Vector_4_in_7 = NULL;
main_Vector_4_in_8 = NULL;
main_Vector_4_in_9 = NULL;
main_Vector_4_in_10 = NULL;
main_Vector_4_in_11 = NULL;
main_Vector_4_out_1 = [ -1 0 2 ];
main_ClipVolumeMacro_2_out_1 = NULL;
main_Switch_10_out_1 = NULL;
main_FaceNormals_1_out_1 = NULL;
main_Receiver_25_out_1 = NULL;
main_AutoColor_1_in_2 = NULL;
main_AutoColor_1_in_3 = NULL;
main_AutoColor_1_in_4 = NULL;
main_AutoColor_1_in_5 = NULL;
main_AutoColor_1_in_6 = NULL;
main_AutoColor_1_in_8 = NULL;
main_AutoColor_1_in_9 = NULL;
main_AutoColor_1_in_10 = NULL;
main_AutoColor_1_out_1 = NULL;
main_ShowBox_1_out_1 = NULL;
main_Collect_1_in_3 = NULL;
main_Collect_1_out_1 = NULL;
macro Image(
        id,
        object,
        where,
        useVector,
        to,
        from,
        width,
        resolution,
        aspect,
        up,
        viewAngle,
        perspective,
        options,
        buttonState = 1,
        buttonUpApprox = "none",
        buttonDownApprox = "none",
        buttonUpDensity = 1,
        buttonDownDensity = 1,
        renderMode = 0,
        defaultCamera,
        reset,
        backgroundColor,
        throttle,
        RECenable = 0,
        RECfile,
        RECformat,
        RECresolution,
        RECaspect,
        AAenable = 0,
        AAlabels,
        AAticks,
        AAcorners,
        AAframe,
        AAadjust,
        AAcursor,
        AAgrid,
        AAcolors,
        AAannotation,
        AAlabelscale,
        AAfont,
        interactionMode,
        title,
        AAxTickLocs,
        AAyTickLocs,
        AAzTickLocs,
        AAxTickLabels,
        AAyTickLabels,
        AAzTickLabels) -> (
        object,
        camera,
        where)
{
    ImageMessage(
        id,
        backgroundColor,
        throttle,
        RECenable,
        RECfile,
        RECformat,
        RECresolution,
        RECaspect,
        AAenable,
        AAlabels,
        AAticks,
        AAcorners,
        AAframe,
        AAadjust,
        AAcursor,
        AAgrid,
        AAcolors,
        AAannotation,
        AAlabelscale,
        AAfont,
        AAxTickLocs,
        AAyTickLocs,
        AAzTickLocs,
        AAxTickLabels,
        AAyTickLabels,
        AAzTickLabels,
        interactionMode,
        title,
        renderMode,
        buttonUpApprox,
        buttonDownApprox,
        buttonUpDensity,
        buttonDownDensity) [instance: 1, cache: 1];
    autoCamera =
        AutoCamera(
            object,
            "front",
            object,
            resolution,
            aspect,
            [0,1,0],
            perspective,
            viewAngle,
            backgroundColor) [instance: 1, cache: 1];
    realCamera =
        Camera(
            to,
            from,
            width,
            resolution,
            aspect,
            up,
            perspective,
            viewAngle,
            backgroundColor) [instance: 1, cache: 1];
    coloredDefaultCamera = 
	 UpdateCamera(defaultCamera,
            background=backgroundColor) [instance: 1, cache: 1];
    nullDefaultCamera =
        Inquire(defaultCamera,
            "is null + 1") [instance: 1, cache: 1];
    resetCamera =
        Switch(
            nullDefaultCamera,
            coloredDefaultCamera,
            autoCamera) [instance: 1, cache: 1];
    resetNull = 
        Inquire(
            reset,
            "is null + 1") [instance: 2, cache: 1];
    reset =
        Switch(
            resetNull,
            reset,
            0) [instance: 2, cache: 1];
    whichCamera =
        Compute(
            "($0 != 0 || $1 == 0) ? 1 : 2",
            reset,
            useVector) [instance: 1, cache: 1];
    camera = Switch(
            whichCamera,
            resetCamera,
            realCamera) [instance: 3, cache: 1];
    AAobject =
        AutoAxes(
            object,
            camera,
            AAlabels,
            AAticks,
            AAcorners,
            AAframe,
            AAadjust,
            AAcursor,
            AAgrid,
            AAcolors,
            AAannotation,
            AAlabelscale,
            AAfont,
            AAxTickLocs,
            AAyTickLocs,
            AAzTickLocs,
            AAxTickLabels,
            AAyTickLabels,
            AAzTickLabels) [instance: 1, cache: 1];
    switchAAenable = Compute("$0+1",
	     AAenable) [instance: 2, cache: 1];
    object = Switch(
	     switchAAenable,
	     object,
	     AAobject) [instance:4, cache: 1];
    SWapproximation_options =
        Switch(
            buttonState,
            buttonUpApprox,
            buttonDownApprox) [instance: 5, cache: 1];
    SWdensity_options =
        Switch(
            buttonState,
            buttonUpDensity,
            buttonDownDensity) [instance: 6, cache: 1];
    HWapproximation_options =
        Format(
            "%s,%s",
            buttonDownApprox,
            buttonUpApprox) [instance: 1, cache: 1];
    HWdensity_options =
        Format(
            "%d,%d",
            buttonDownDensity,
            buttonUpDensity) [instance: 2, cache: 1];
    switchRenderMode = Compute(
	     "$0+1",
	     renderMode) [instance: 3, cache: 1];
    approximation_options = Switch(
	     switchRenderMode,
            SWapproximation_options,
	     HWapproximation_options) [instance: 7, cache: 1];
    density_options = Switch(
	     switchRenderMode,
            SWdensity_options,
            HWdensity_options) [instance: 8, cache: 1];
    renderModeString = Switch(
            switchRenderMode,
            "software",
            "hardware")[instance: 9, cache: 1];
    object_tag = Inquire(
            object,
            "object tag")[instance: 3, cache: 1];
    annoted_object =
        Options(
            object,
            "send boxes",
            0,
            "cache",
            1,
            "object tag",
            object_tag,
            "ddcamera",
            whichCamera,
            "rendering approximation",
            approximation_options,
            "render every",
            density_options,
            "button state",
            buttonState,
            "rendering mode",
            renderModeString) [instance: 1, cache: 1];
    RECresNull =
        Inquire(
            RECresolution,
            "is null + 1") [instance: 4, cache: 1];
    ImageResolution =
        Inquire(
            camera,
            "camera resolution") [instance: 5, cache: 1];
    RECresolution =
        Switch(
            RECresNull,
            RECresolution,
            ImageResolution) [instance: 10, cache: 1];
    RECaspectNull =
        Inquire(
            RECaspect,
            "is null + 1") [instance: 6, cache: 1];
    ImageAspect =
        Inquire(
            camera,
            "camera aspect") [instance: 7, cache: 1];
    RECaspect =
        Switch(
            RECaspectNull,
            RECaspect,
            ImageAspect) [instance: 11, cache: 1];
    switchRECenable = Compute(
          "$0 == 0 ? 1 : (($2 == $3) && ($4 == $5)) ? ($1 == 1 ? 2 : 3) : 4",
            RECenable,
            switchRenderMode,
            RECresolution,
            ImageResolution,
            RECaspect,
	     ImageAspect) [instance: 4, cache: 1];
    NoRECobject, RECNoRerenderObject, RECNoRerHW, RECRerenderObject = Route(switchRECenable, annoted_object);
    Display(
        NoRECobject,
        camera,
        where,
        throttle) [instance: 1, cache: 1];
    image =
        Render(
            RECNoRerenderObject,
            camera) [instance: 1, cache: 1];
    Display(
        image,
        NULL,
        where,
        throttle) [instance: 2, cache: 1];
    WriteImage(
        image,
        RECfile,
        RECformat) [instance: 1, cache: 1];
    rec_where = Display(
        RECNoRerHW,
        camera,
        where,
        throttle) [instance: 1, cache: 0];
    rec_image = ReadImageWindow(
        rec_where) [instance: 1, cache: 1];
    WriteImage(
        rec_image,
        RECfile,
        RECformat) [instance: 1, cache: 1];
    RECupdateCamera =
	UpdateCamera(
	    camera,
	    resolution=RECresolution,
	    aspect=RECaspect) [instance: 2, cache: 1];
    Display(
        RECRerenderObject,
        camera,
        where,
        throttle) [instance: 1, cache: 1];
    RECRerenderObject =
	ScaleScreen(
	    RECRerenderObject,
	    NULL,
	    RECresolution,
	    camera) [instance: 1, cache: 1];
    image =
        Render(
            RECRerenderObject,
            RECupdateCamera) [instance: 2, cache: 1];
    WriteImage(
        image,
        RECfile,
        RECformat) [instance: 2, cache: 1];
}
main_Image_1_in_1 = "Image_1";
main_Image_1_in_3 = "X8,,";
main_Image_1_in_4 = 1;
main_Image_1_in_5 = [0 0 0];
main_Image_1_in_6 = [4.15999 -3.73732 6.67107];
main_Image_1_in_7 = NULL;
main_Image_1_in_8 = 640;
main_Image_1_in_9 = 0.75;
main_Image_1_in_10 = [0.826221 -0.0765712 -0.558118];
main_Image_1_in_11 = 30.0001;
main_Image_1_in_12 = 1;
main_Image_1_in_13 = NULL;
main_Image_1_in_14 = 1;
main_Image_1_in_15 = NULL;
main_Image_1_in_16 = NULL;
main_Image_1_in_17 = NULL;
main_Image_1_in_18 = NULL;
main_Image_1_in_19 = 0;
main_Image_1_in_20 = NULL;
main_Image_1_in_21 = NULL;
main_Image_1_in_22 = NULL;
main_Image_1_in_23 = NULL;
main_Image_1_in_25 = NULL;
main_Image_1_in_26 = NULL;
main_Image_1_in_27 = NULL;
main_Image_1_in_28 = NULL;
main_Image_1_in_29 = NULL;
main_Image_1_in_30 = NULL;
main_Image_1_in_31 = NULL;
main_Image_1_in_32 = NULL;
main_Image_1_in_33 = NULL;
main_Image_1_in_34 = NULL;
main_Image_1_in_35 = NULL;
main_Image_1_in_36 = NULL;
main_Image_1_in_37 = NULL;
main_Image_1_in_38 = NULL;
main_Image_1_in_39 = NULL;
main_Image_1_in_40 = NULL;
main_Image_1_in_41 = "rotate";
main_Image_1_in_42 = NULL;
main_Image_1_in_43 = NULL;
main_Image_1_in_44 = NULL;
main_Image_1_in_45 = NULL;
main_Image_1_in_46 = NULL;
main_Image_1_in_47 = NULL;
main_Image_1_in_48 = NULL;
Executive("product version 3 1 4");
$sync
main();
